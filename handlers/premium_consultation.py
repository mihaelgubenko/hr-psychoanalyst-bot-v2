"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
PREMIUM FEATURE: –°–í–û–ë–û–î–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–æ–¥ –¥–ª—è –ü–õ–ê–¢–ù–û–ô —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.

üìç –ì–î–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø:
   - –ü–ª–∞—Ç–Ω–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ (GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö, GPT-3.5-turbo –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö)
   - –¢—Ä–µ–∫–µ—Ä: 7 –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø—Ä–æ—Å—Ç—ã–µ) / 15 –≤–æ–ø—Ä–æ—Å–æ–≤ (—Å–ª–æ–∂–Ω—ã–µ)
   - –ü–æ—Å–ª–µ —Ç–µ—Å—Ç–∞: 10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö follow-up –≤–æ–ø—Ä–æ—Å–æ–≤

üéØ –§–£–ù–ö–¶–ò–û–ù–ê–õ:
   - –°–≤–æ–±–æ–¥–Ω—ã–π –¥–∏–∞–ª–æ–≥ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
   - –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
   - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É GPT-3.5 –∏ GPT-4
   - –¢—Ä–µ–∫–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö/–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
   - –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ—Ç–≤–µ—Ç—É
   - –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –ª–∏—á–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø—Ä–∏ –∏—Å—á–µ—Ä–ø–∞–Ω–∏–∏ –ª–∏–º–∏—Ç–∞

üìÖ –î–ê–¢–ê –°–û–ó–î–ê–ù–ò–Ø: 2025-10-17
üìù –ü–†–ò–ß–ò–ù–ê –î–ï–ê–ö–¢–ò–í–ê–¶–ò–ò: –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è —Ä–∞—Å—Ö–æ–¥–æ–≤ –Ω–∞ —Ç–æ–∫–µ–Ω—ã, –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —Ç–µ—Å—Ç

üîÑ –ö–ê–ö –í–ö–õ–Æ–ß–ò–¢–¨:
   1. –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç –≤ handlers/message_handler.py
   2. –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è" –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
   3. –ü–æ–¥–∫–ª—é—á–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ core/bot.py
   4. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ª–∏–º–∏—Ç—ã –≤ config/settings.yaml

‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

logger = logging.getLogger(__name__)

class PremiumConsultationHandler:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–ª–∞—Ç–Ω–æ–π —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
    
    –û—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–Ω–∏–≥–µ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ" —Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—ã–π –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏ OpenAI –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞.
    """
    
    def __init__(self, ai_client, database):
        self.ai_client = ai_client
        self.database = database
        self.consultation_history = {}  # user_id -> list of messages
        self.question_tracker = {}  # user_id -> {'count': int, 'max': int, 'type': 'simple'|'complex'}
    
    async def start_consultation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–ù–∞—á–∞–ª–æ —Å–≤–æ–±–æ–¥–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        consultation_intro = """
üí¨ **–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø**

–®–∞–ª–æ–º! –Ø –≥–æ—Ç–æ–≤ –≤–∞–º –ø–æ–º–æ—á—å üôè

**–Ø –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É—é –ø–æ —Ç–µ–º–∞–º:**
‚ú® –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ
üò∞ –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–∞—Ö–∞–º–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∞–º–∏
üò§ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –æ—Ç –≥–Ω–µ–≤–∞ –∏ –æ–±–∏–¥
üéØ –ü–æ–∏—Å–∫ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–º—ã—Å–ª–∞ –∂–∏–∑–Ω–∏
üíù –û—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏
üå± –î—É—Ö–æ–≤–Ω–æ–µ –∏ –ª–∏—á–Ω–æ—Å—Ç–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ

**–ú–æ–π –ø–æ–¥—Ö–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞:**
üìñ –ü—Ä–∏–Ω—Ü–∏–ø–∞—Ö —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è –∏ –¥—É—Ö–æ–≤–Ω–æ–≥–æ —Ä–æ—Å—Ç–∞ (–∫–Ω–∏–≥–∞ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ")
üß† –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–µ (–§—Ä–µ–π–¥, –Æ–Ω–≥)
üéØ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–∏–∫–∞—Ö —Ä–∞–±–æ—Ç—ã —Å —ç–º–æ—Ü–∏—è–º–∏
üí° –≠–º–ø–∞—Ç–∏–∏ –∏ –≥–ª—É–±–æ–∫–æ–º –ø–æ–Ω–∏–º–∞–Ω–∏–∏

**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**
1Ô∏è‚É£ –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç
2Ô∏è‚É£ –Ø –∑–∞–¥–∞–º —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
3Ô∏è‚É£ –î–∞–º –∞–Ω–∞–ª–∏–∑ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
4Ô∏è‚É£ –ü—Ä–µ–¥–ª–æ–∂—É –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

üí¨ *–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω–∞ –¥—É—à–µ, –∏ —è –ø–æ–º–æ–≥—É!*

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ë–æ—é—Å—å —á—Ç–æ –º–µ–Ω—è –æ—Å—É–¥—è—Ç"
‚Ä¢ "–ù–µ –∑–Ω–∞—é —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ"  
‚Ä¢ "–ï—Å—Ç—å –æ–±–∏–¥–∞ –Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª–µ–π"
‚Ä¢ "–•–æ—á—É –ø–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É"
‚Ä¢ "–ß—É–≤—Å—Ç–≤—É—é –≥–Ω–µ–≤ –≤–Ω—É—Ç—Ä–∏"

---
üíé *–î–ª—è –≥–ª—É–±–æ–∫–æ–π —Ä–∞–±–æ—Ç—ã –¥–æ—Å—Ç—É–ø–Ω–∞ –ª–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è* ‚Üí /personal
"""
        await update.message.reply_text(consultation_intro, parse_mode=ParseMode.MARKDOWN)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_id = update.effective_user.id
        if user_id not in self.question_tracker:
            self.question_tracker[user_id] = {
                'count': 0,
                'max': 7,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 7 –¥–ª—è –ø—Ä–æ—Å—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
                'type': 'simple'
            }
    
    async def handle_consultation_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ.")
            return 'WAITING_MESSAGE'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤
        tracker = self.question_tracker.get(user.id)
        if tracker and tracker['count'] >= tracker['max']:
            # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
            keyboard = [
                [InlineKeyboardButton("üë§ –õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='personal')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await update.message.reply_text(
                f"‚ö†Ô∏è **–õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω ({tracker['count']}/{tracker['max']})**\n\n"
                f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É?\n\n"
                f"üíé **–õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:**\n"
                f"‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                f"‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n"
                f"‚Ä¢ –ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä\n\n"
                f"–û—Ç 2000‚ÇΩ",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            return 'WAITING_MESSAGE'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–æ–∂–Ω–æ—Å—Ç—å –≤–æ–ø—Ä–æ—Å–∞
        is_complex = self._is_complex_question(text)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç—Ä–µ–∫–µ—Ä
        if is_complex and tracker['type'] == 'simple':
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ —Å–ª–æ–∂–Ω—ã–π —Ä–µ–∂–∏–º
            tracker['type'] = 'complex'
            tracker['max'] = 15
        
        tracker['count'] += 1
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –í—ã–±–∏—Ä–∞–µ–º –º–æ–¥–µ–ª—å
            model = "gpt-4" if is_complex else "gpt-3.5-turbo"
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç
            response = await self._get_consultation_response(user.id, text, model)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await thinking_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._send_response(update, response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            keyboard = [
                [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='consultation_back')],
                [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='end_consultation')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            remaining = tracker['max'] - tracker['count']
            await update.message.reply_text(
                f"üí° –û—Å—Ç–∞–ª–æ—Å—å –≤–æ–ø—Ä–æ—Å–æ–≤: **{remaining}/{tracker['max']}** ({tracker['type']})\n"
                f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return 'WAITING_MESSAGE'
    
    def _is_complex_question(self, text: str) -> bool:
        """
        –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –≤–æ–ø—Ä–æ—Å–∞
        
        –°–õ–û–ñ–ù–´–ô –≤–æ–ø—Ä–æ—Å:
        - –î–ª–∏–Ω–∞ > 50 —Å–ª–æ–≤
        - –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã (–±–æ—é—Å—å, —Ç—Ä–µ–≤–æ–≥–∞, –¥–µ–ø—Ä–µ—Å—Å–∏—è)
        - –õ–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è
        - –ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑
        
        –ü–†–û–°–¢–û–ô –≤–æ–ø—Ä–æ—Å:
        - "–ß—Ç–æ —Ç–∞–∫–æ–µ...?"
        - "–ö–∞–∫ –Ω–∞—á–∞—Ç—å...?"
        - FAQ
        """
        text_lower = text.lower()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª–∏–Ω—ã
        word_count = len(text.split())
        if word_count > 50:
            return True
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –º–∞—Ä–∫–µ—Ä—ã
        emotional_keywords = [
            '–±–æ—é—Å—å', '—Å—Ç—Ä–∞—Ö', '—Ç—Ä–µ–≤–æ–≥–∞', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '–ø–∞–Ω–∏–∫–∞',
            '–≥—Ä—É—Å—Ç—å', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–±–æ–ª—å–Ω–æ', '—Å—Ç—Ä–∞—à–Ω–æ', '–ø–ª–æ—Ö–æ',
            '—Ä–∞–∑–≤–æ–¥', '—Å–º–µ—Ä—Ç—å', '–ø–æ—Ç–µ—Ä—è', '—Ç—Ä–∞–≤–º–∞', '–Ω–∞—Å–∏–ª–∏–µ'
        ]
        
        if any(keyword in text_lower for keyword in emotional_keywords):
            return True
        
        # –õ–∏—á–Ω–∞—è –∏—Å—Ç–æ—Ä–∏—è (–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ "—è", "–º–æ–π", "–º–Ω–µ")
        personal_markers = ['—è ', '–º–Ω–µ ', '–º–æ–π', '–º–æ—è', '–º–æ–∏', '—Å–æ –º–Ω–æ–π']
        if any(marker in text_lower for marker in personal_markers):
            return True
        
        # –ü—Ä–æ—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        simple_questions = [
            '—á—Ç–æ —Ç–∞–∫–æ–µ', '–∫–∞–∫ –Ω–∞—á–∞—Ç—å', '–æ–±—ä—è—Å–Ω–∏', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ',
            '–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞', '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç'
        ]
        
        if any(q in text_lower for q in simple_questions):
            return False
        
        # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å—á–∏—Ç–∞–µ–º —Å–ª–æ–∂–Ω—ã–º
        return True
    
    async def _get_consultation_response(self, user_id: int, message: str, model: str) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò —Å –≤—ã–±–æ—Ä–æ–º –º–æ–¥–µ–ª–∏"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        conversation_context = self.consultation_history.get(user_id, [])
        context = {
            'conversation': '\n'.join(conversation_context[-5:]),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π
            'user_message': message,
            'message_count': len(conversation_context)
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(
            prompt=message,
            user_id=user_id,
            prompt_type='consultation',
            context=context,
            model=model  # –ü–µ—Ä–µ–¥–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –º–æ–¥–µ–ª—å
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if user_id not in self.consultation_history:
            self.consultation_history[user_id] = []
        
        self.consultation_history[user_id].append(f"USER: {message}")
        self.consultation_history[user_id].append(f"AI: {ai_response.content}")
        
        return ai_response.content
    
    async def _send_response(self, update: Update, response: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000
            if len(response) <= max_length:
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
                for i, part in enumerate(parts):
                    prefix = f"**–û—Ç–≤–µ—Ç (—á–∞—Å—Ç—å {i+1}/{len(parts)}):**\n\n" if i > 0 else ""
                    await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            try:
                await update.message.reply_text(response)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                await update.message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞.")
    
    async def handle_back_button(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥'"""
        user_id = update.effective_user.id
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é
        history = self.consultation_history.get(user_id, [])
        
        if len(history) < 2:
            await update.callback_query.answer("–ù–µ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
            return
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –æ—Ç–≤–µ—Ç—É
        prev_response = history[-2] if history[-2].startswith("AI:") else history[-3]
        prev_response = prev_response.replace("AI: ", "")
        
        # –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫
        if user_id in self.question_tracker:
            self.question_tracker[user_id]['count'] = max(0, self.question_tracker[user_id]['count'] - 1)
        
        await update.callback_query.edit_message_text(
            f"‚¨ÖÔ∏è **–ü–†–ï–î–´–î–£–©–ò–ô –û–¢–í–ï–¢:**\n\n{prev_response}",
            parse_mode=ParseMode.MARKDOWN
        )
    
    def clear_user_data(self, user_id: int):
        """–û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.consultation_history.pop(user_id, None)
        self.question_tracker.pop(user_id, None)

