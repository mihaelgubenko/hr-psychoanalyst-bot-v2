"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç–µ—Å—Ç–æ–≤
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ai.adaptive_prompt_manager import PromptType

logger = logging.getLogger(__name__)

class AnalysisHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, ai_client, database):
        self.ai_client = ai_client
        self.database = database
        self.user_data = {}  # user_id -> analysis data
    
    async def start_self_esteem_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        user = update.effective_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        self.user_data[user.id] = {
            'test_type': 'self_esteem',
            'answers': [],
            'current_question': 0
        }
        
        intro_text = """
üìñ **–¢–ï–°–¢ –°–ê–ú–û–û–¶–ï–ù–ö–ò | "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"**

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –º–æ–µ–π –∞–≤—Ç–æ—Ä—Å–∫–æ–π –∫–Ω–∏–≥–µ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ" –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:

‚ú® –ü–æ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
üéØ –ù–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
üòå –û—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤, –≥–Ω–µ–≤–∞ –∏ –æ–±–∏–¥
üíù –£–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏

**–§–æ—Ä–º–∞—Ç:** 30 –≤–æ–ø—Ä–æ—Å–æ–≤, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö –Ω–∞ 5 –±–ª–æ–∫–æ–≤
**–í—Ä–µ–º—è:** ~15-20 –º–∏–Ω—É—Ç
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–û—Ç–≤–µ—á–∞–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ - —ç—Ç–æ –∫–ª—é—á –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 30:**
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏? (1-10)
"""
        
        await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)
        return 'SELF_ESTEEM_Q'
    
    async def handle_self_esteem_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text or len(text) < 3:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –±–æ–ª–µ–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞)."
            )
            return 'SELF_ESTEEM_Q'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        user_data = self.user_data.get(user.id, {})
        answers = user_data.get('answers', [])
        current_q = user_data.get('current_question', 0)
        
        answers.append(text)
        current_q += 1
        
        self.user_data[user.id] = {
            'test_type': 'self_esteem',
            'answers': answers,
            'current_question': current_q
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã
        if current_q >= 30:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÆ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏...\n"
                "–≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
            analysis_result = await self._analyze_self_esteem(user.id, answers)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_analysis_result(update, analysis_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.database.save_analysis(
                user.id, 
                user.first_name or f"User_{user.id}", 
                'self_esteem', 
                {
                    'type': 'self_esteem',
                    'answers': answers,
                    'analysis': analysis_result
                }
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.user_data.pop(user.id, None)
            return 'END'
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = self._get_next_question(current_q)
        await update.message.reply_text(next_question, parse_mode=ParseMode.MARKDOWN)
        
        return 'SELF_ESTEEM_Q'
    
    async def start_full_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analyses = await self.database.get_user_analyses(user.id)
        has_full_analysis = any(analysis.analysis_type == 'full' for analysis in analyses)
        
        if has_full_analysis:
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑! –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return 'WAITING_MESSAGE'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
        self.user_data[user.id] = {
            'test_type': 'full_analysis',
            'answers': [],
            'current_question': 0
        }
        
        professional_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –¥–µ—Ç—Å—Ç–≤–µ. –ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? –û–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
            "–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ? –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è?",
            "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞–∂–Ω—ã?",
            "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–µ–±–µ, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∏? –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?"
        ]
        
        await update.message.reply_text(
            "üíé **–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑**\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
            "–ë—É–¥–µ—Ç 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7:**\n"
            f"{professional_questions[0]}"
        )
        
        return 'Q1'
    
    async def handle_full_analysis_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text or len(text) < 20:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). "
                "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            )
            return context.user_data.get('current_question', 'Q1')
        
        user_data = self.user_data.get(user.id, {})
        answers = user_data.get('answers', [])
        current_q = user_data.get('current_question', 0)
        
        answers.append(text)
        current_q += 1
        
        self.user_data[user.id] = {
            'test_type': 'full_analysis',
            'answers': answers,
            'current_question': current_q
        }
        
        professional_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –¥–µ—Ç—Å—Ç–≤–µ. –ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? –û–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
            "–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ? –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è?",
            "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞–∂–Ω—ã?",
            "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–µ–±–µ, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∏? –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?"
        ]
        
        if current_q < 7:
            await update.message.reply_text(
                f"**–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ 7:**\n"
                f"{professional_questions[current_q]}"
            )
            return f'Q{current_q + 1}'
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—Ç–µ–Ω—ã, –ø—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. "
                "–ü—Ä–æ–≤–æ–∂—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
            analysis_result = await self._analyze_full_personality(user.id, answers)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_analysis_result(update, analysis_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.database.save_analysis(
                user.id, 
                user.first_name or f"User_{user.id}", 
                'full', 
                {
                    'type': 'full',
                    'answers': answers,
                    'analysis': analysis_result
                },
                'paid'
            )
            
            await update.message.reply_text(
                "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            self.user_data.pop(user.id, None)
            return 'END'
    
    async def _analyze_self_esteem(self, user_id: int, answers: list) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        answers_text = "\n".join([f"{i+1}. {answer}" for i, answer in enumerate(answers)])
        
        prompt = f"""
–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–µ. –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.

–û–¢–í–ï–¢–´ –ù–ê –¢–ï–°–¢ (30 –≤–æ–ø—Ä–æ—Å–æ–≤):
{answers_text}

–ü–†–û–í–ï–î–ò –ê–ù–ê–õ–ò–ó –ü–û –ë–õ–û–ö–ê–ú:

üíé **–°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —Å–∞–º–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å (–≤–æ–ø—Ä–æ—Å—ã 1-6)**
üò® **–°—Ç—Ä–∞—Ö–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∏ (–≤–æ–ø—Ä–æ—Å—ã 7-12)**
üò§ **–ì–Ω–µ–≤ –∏ –æ–±–∏–¥—ã (–≤–æ–ø—Ä–æ—Å—ã 13-18)**
üéØ **–ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–º—ã—Å–ª (–≤–æ–ø—Ä–æ—Å—ã 19-24)**
üíù **–û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ (–≤–æ–ø—Ä–æ—Å—ã 25-30)**

–î–õ–Ø –ö–ê–ñ–î–û–ì–û –ë–õ–û–ö–ê:
- –û—Ü–µ–Ω–∫–∞ –ø–æ —à–∫–∞–ª–µ 1-10
- –ö–ª—é—á–µ–≤—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –º–æ—Ç–∏–≤–∏—Ä—É—é—â–∏–π. 800-1200 —Å–ª–æ–≤.
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(
            prompt=prompt,
            user_id=user_id,
            prompt_type=PromptType.SELF_ESTEEM_ANALYSIS
        )
        
        return ai_response.content
    
    async def _analyze_full_personality(self, user_id: int, answers: list) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        answers_text = "\n".join([f"{i+1}. {answer}" for i, answer in enumerate(answers)])
        
        prompt = f"""
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ HR-—ç–∫—Å–ø–µ—Ä—Ç —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ö–õ–ò–ï–ù–¢–ê:
{answers_text}

–ü–†–û–í–ï–î–ò –ì–õ–£–ë–û–ö–ò–ô –ü–°–ò–•–û–ê–ù–ê–õ–ò–ó:

üß† **–ü–°–ò–•–û–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:**
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ò–¥/–≠–≥–æ/–°—É–ø–µ—Ä—ç–≥–æ)
- –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –¢—Ä–∞–≤–º—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ

üé≠ **–ê–†–•–ï–¢–ò–ü–´ –ò –¢–ò–ü–û–õ–û–ì–ò–Ø:**
- –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø –ø–æ –Æ–Ω–≥—É
- MBTI —Ç–∏–ø —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
- –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

üìä **BIG FIVE (OCEAN):**
- –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ  
- –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –ù–µ–π—Ä–æ—Ç–∏–∑–º: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

üíº **HR-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
- –°—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Ä–∞–±–æ—Ç—ã
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

üéì **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
- –§–æ—Ä–º–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–æ—á–Ω–æ–µ/–∑–∞–æ—á–Ω–æ–µ)
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
- –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è

üîÆ **–ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø:**
- –ö–∞–∫ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ—Å—Ç—å
- –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π. 1200-1500 —Å–ª–æ–≤.
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(
            prompt=prompt,
            user_id=user_id,
            prompt_type=PromptType.FULL_ANALYSIS
        )
        
        return ai_response.content
    
    async def _send_analysis_result(self, update: Update, result: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000
        if len(result) <= max_length:
            await update.message.reply_text(result, parse_mode=ParseMode.MARKDOWN)
        else:
            parts = [result[i:i+max_length] for i in range(0, len(result), max_length)]
            for i, part in enumerate(parts):
                prefix = f"**–ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):**\n\n" if i > 0 else ""
                await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
    
    def _get_next_question(self, question_num: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        
        questions = [
            "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏? (1-10)",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ–±–æ–π –∏ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã —Å—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç–µ —Å–µ–±—è —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏?",
            "–í–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤ —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏?",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø—Ä–∏–Ω–∏–º–∞–µ—Ç–µ —Å–µ–±—è —Ç–∞–∫–∏–º, –∫–∞–∫–æ–π –≤—ã –µ—Å—Ç—å?",
            "–ö–∞–∫ –≤—ã —Ä–µ–∞–≥–∏—Ä—É–µ—Ç–µ –Ω–∞ –∫—Ä–∏—Ç–∏–∫—É –≤ —Å–≤–æ–π –∞–¥—Ä–µ—Å?",
            "–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—à–∞—é—Ç –≤–∞–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?",
            "–ë–æ–∏—Ç–µ—Å—å –ª–∏ –≤—ã —Å–æ–≤–µ—Ä—à–∏—Ç—å –æ—à–∏–±–∫—É –∏–ª–∏ –ø–æ—Ç–µ—Ä–ø–µ—Ç—å –Ω–µ—É–¥–∞—á—É?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ —Ç—Ä–µ–≤–æ–≥–∞ –º–µ—à–∞–µ—Ç –≤–∞–º –ø—Ä–∏–Ω–∏–º–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å —Å—Ç—Ä–∞—Ö –æ—Å—É–∂–¥–µ–Ω–∏—è –∏–ª–∏ –Ω–µ–ø—Ä–∏–Ω—è—Ç–∏—è?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å–≤–æ–∏–º–∏ —Å—Ç—Ä–∞—Ö–∞–º–∏?",
            "–ë–æ–∏—Ç–µ—Å—å –ª–∏ –≤—ã –ø–µ—Ä–µ–º–µ–Ω –≤ –∂–∏–∑–Ω–∏?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≥–Ω–µ–≤ –∏–ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–±–∏–¥—ã –Ω–∞ –ª—é–¥–µ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ?",
            "–õ–µ–≥–∫–æ –ª–∏ –≤–∞–º –ø—Ä–æ—â–∞—Ç—å –¥—Ä—É–≥–∏—Ö –ª—é–¥–µ–π?",
            "–ö–∞–∫ –≤—ã –≤—ã—Ä–∞–∂–∞–µ—Ç–µ —Å–≤–æ–π –≥–Ω–µ–≤?",
            "–î–µ—Ä–∂–∏—Ç–µ –ª–∏ –≤—ã –æ–±–∏–¥—ã –≤–Ω—É—Ç—Ä–∏ –∏–ª–∏ –≤—ã—Ä–∞–∂–∞–µ—Ç–µ –∏—Ö?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –≤–∏–Ω—É –ø–æ—Å–ª–µ –ø—Ä–æ—è–≤–ª–µ–Ω–∏—è –≥–Ω–µ–≤–∞?",
            "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã, —á—Ç–æ –∂–∏–≤–µ—Ç–µ –Ω–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∂–∏–∑–Ω—å—é?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –º–µ—á—Ç–∞ –∏–ª–∏ –±–æ–ª—å—à–∞—è —Ü–µ–ª—å?",
            "–ß—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç —Å–º—ã—Å–ª –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
            "–î–µ–ª–∞–µ—Ç–µ –ª–∏ –≤—ã —Ç–æ, —á—Ç–æ –ª—é–±–∏—Ç–µ?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–≤—è–∑—å —Å —á–µ–º-—Ç–æ –±–æ–ª—å—à–∏–º, —á–µ–º –≤—ã —Å–∞–º–∏?",
            "–õ–µ–≥–∫–æ –ª–∏ –≤–∞–º –≤—ã—Ä–∞–∂–∞—Ç—å —Å–≤–æ–∏ —á—É–≤—Å—Ç–≤–∞ –∏ –º—ã—Å–ª–∏?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã –ø–æ–¥–¥–µ—Ä–∂–∫—É –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π?",
            "–£–º–µ–µ—Ç–µ –ª–∏ –≤—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –≤ –æ—Ç–Ω–æ—à–µ–Ω–∏—è—Ö?",
            "–ö–∞–∫ –≤—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ –ª—é–±–æ–≤—å –∫ —Å–µ–±–µ?",
            "–î–æ–≤–µ—Ä—è–µ—Ç–µ –ª–∏ –≤—ã –¥—Ä—É–≥–∏–º –ª—é–¥—è–º?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω—ã–º –±—ã—Ç—å —Å–æ–±–æ–π?"
        ]
        
        if question_num < len(questions):
            block_change = ""
            if question_num in [6, 12, 18, 24]:
                block_names = [
                    "üíé –ë–ª–æ–∫ 1: –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ –∏ —Å–∞–º–æ—Ü–µ–Ω–Ω–æ—Å—Ç—å",
                    "üò® –ë–ª–æ–∫ 2: –°—Ç—Ä–∞—Ö–∏ –∏ —Ç—Ä–µ–≤–æ–≥–∏", 
                    "üò§ –ë–ª–æ–∫ 3: –ì–Ω–µ–≤ –∏ –æ–±–∏–¥—ã",
                    "üéØ –ë–ª–æ–∫ 4: –ü—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–º—ã—Å–ª",
                    "üíù –ë–ª–æ–∫ 5: –û—Ç–Ω–æ—à–µ–Ω–∏—è –∏ —Å–∞–º–æ–≤—ã—Ä–∞–∂–µ–Ω–∏–µ"
                ]
                block_idx = question_num // 6
                if block_idx < len(block_names):
                    block_change = f"\n\n{block_names[block_idx]}\n"
            
            return f"{block_change}\n**–í–æ–ø—Ä–æ—Å {question_num + 1} –∏–∑ 30:**\n{questions[question_num]}"
        
        return "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"