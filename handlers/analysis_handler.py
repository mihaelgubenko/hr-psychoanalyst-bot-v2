"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏ –∏ —Ç–µ—Å—Ç–æ–≤
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler
from telegram.constants import ParseMode

from ai.adaptive_prompt_manager import PromptType

logger = logging.getLogger(__name__)

class AnalysisHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–Ω–∞–ª–∏–∑–æ–≤ –ª–∏—á–Ω–æ—Å—Ç–∏"""
    
    def __init__(self, ai_client, database):
        self.ai_client = ai_client
        self.database = database
        self.user_data = {}  # user_id -> analysis data
        self.button_test_data = {}  # user_id -> {answers, current_q} –¥–ª—è —Ç–µ—Å—Ç–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    
    async def start_self_esteem_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        user = update.effective_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ context (–≤–∞–∂–Ω–æ –¥–ª—è ConversationHandler!)
        context.user_data['test_type'] = 'self_esteem'
        context.user_data['answers'] = []
        context.user_data['current_question'] = 0
        
        intro_text = """
üìñ **–¢–ï–°–¢ –°–ê–ú–û–û–¶–ï–ù–ö–ò | "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"**

–≠—Ç–æ—Ç —Ç–µ—Å—Ç –æ—Å–Ω–æ–≤–∞–Ω –Ω–∞ –∫–Ω–∏–≥–µ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ" –∏ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º:

‚ú® –ü–æ–Ω—è—Ç—å —É—Ä–æ–≤–µ–Ω—å –≤–∞—à–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏
üéØ –ù–∞–π—Ç–∏ —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ
üòå –û—Å–≤–æ–±–æ–¥–∏—Ç—å—Å—è –æ—Ç —Å—Ç—Ä–∞—Ö–æ–≤, –≥–Ω–µ–≤–∞ –∏ –æ–±–∏–¥
üíù –£–ª—É—á—à–∏—Ç—å –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å —Å–æ–±–æ–π –∏ –¥—Ä—É–≥–∏–º–∏

**–ü—Ä–∏–Ω—Ü–∏–ø—ã –∏–∑ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ":**
‚Ä¢ –ö–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —Å–æ–∑–¥–∞–Ω –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–π –º–∏—Å—Å–∏–∏
‚Ä¢ "–î–ª—è –º–µ–Ω—è —Å–æ–∑–¥–∞–Ω –º–∏—Ä" - –≤—ã –≤–∞–∂–Ω—ã –∫–∞–∫ —Ü–µ–ª—ã–π –º–∏—Ä
‚Ä¢ –°–∞–º–æ—É–≤–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –ø–æ–Ω–∏–º–∞–Ω–∏–∏ —Å–≤–æ–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
‚Ä¢ –£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–∏–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

**–§–æ—Ä–º–∞—Ç:** 10 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
**–í—Ä–µ–º—è:** ~5-7 –º–∏–Ω—É—Ç  
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ + –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

üí° *–û—Ç–≤–µ—á–∞–π—Ç–µ –∏—Å–∫—Ä–µ–Ω–Ω–µ - —ç—Ç–æ –∫–ª—é—á –∫ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏–∏!*

‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ

**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 10:**
–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏? (1-10)
"""
        
        await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)
        return 'SELF_ESTEEM_Q'
    
    async def handle_self_esteem_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text or len(text) < 1:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç."
            )
            return 'SELF_ESTEEM_Q'
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ context (–≤–∞–∂–Ω–æ –¥–ª—è ConversationHandler!)
        answers = context.user_data.get('answers', [])
        current_q = context.user_data.get('current_question', 0)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers.append(text)
        current_q += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º context
        context.user_data['answers'] = answers
        context.user_data['current_question'] = current_q
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –ª–∏ –≤–æ–ø—Ä–æ—Å—ã (10 –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞)
        if current_q >= 10:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã - –ø—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÆ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏...\n"
                "‚è±Ô∏è –≠—Ç–æ –∑–∞–π–º–µ—Ç 30-60 —Å–µ–∫—É–Ω–¥."
            )
            
            try:
                # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
                analysis_result = await self._analyze_self_esteem(user.id, answers)
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏: {e}", exc_info=True)
                await update.message.reply_text(
                    "üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ.\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω–æ–≤–æ."
                )
                context.user_data.clear()
                return ConversationHandler.END
            
            analysis_result = analysis_result if analysis_result else "–ê–Ω–∞–ª–∏–∑ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω."
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_analysis_result(update, analysis_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.database.save_analysis(
                user.id, 
                user.first_name or f"User_{user.id}", 
                'self_esteem', 
                {
                    'type': 'self_esteem',
                    'answers': answers,
                    'analysis': analysis_result
                }
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return ConversationHandler.END
        
        # –°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
        next_question = self._get_next_question(current_q)
        await update.message.reply_text(next_question, parse_mode=ParseMode.MARKDOWN)
        
        return 'SELF_ESTEEM_Q'
    
    async def start_full_analysis(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–ù–∞—á–∞–ª–æ –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        analyses = await self.database.get_user_analyses(user.id)
        has_full_analysis = any(analysis.analysis_type == 'full' for analysis in analyses)
        
        if has_full_analysis:
            await update.message.reply_text(
                "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑! –î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            return 'WAITING_MESSAGE'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ context
        context.user_data['test_type'] = 'full_analysis'
        context.user_data['answers'] = []
        context.user_data['current_question'] = 0
        
        professional_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –¥–µ—Ç—Å—Ç–≤–µ. –ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? –û–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
            "–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ? –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è?",
            "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞–∂–Ω—ã?",
            "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–µ–±–µ, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∏? –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?"
        ]
        
        await update.message.reply_text(
            "üíé **–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑**\n\n"
            "–û—Ç–ª–∏—á–Ω–æ! –°–µ–π—á–∞—Å —è –ø—Ä–æ–≤–µ–¥—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∞—à–µ–π –ª–∏—á–Ω–æ—Å—Ç–∏.\n"
            "–ë—É–¥–µ—Ç 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.\n\n"
            "**–í–æ–ø—Ä–æ—Å 1 –∏–∑ 7:**\n"
            f"{professional_questions[0]}"
        )
        
        return 'Q1'
    
    async def handle_full_analysis_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text or len(text) < 20:
            await update.message.reply_text(
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–∞–π—Ç–µ —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç (–º–∏–Ω–∏–º—É–º 20 —Å–∏–º–≤–æ–ª–æ–≤). "
                "–≠—Ç–æ –≤–∞–∂–Ω–æ –¥–ª—è –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞."
            )
            return context.user_data.get('current_question', 'Q1')
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ context
        answers = context.user_data.get('answers', [])
        current_q = context.user_data.get('current_question', 0)
        
        answers.append(text)
        current_q += 1
        
        # –û–±–Ω–æ–≤–ª—è–µ–º context
        context.user_data['answers'] = answers
        context.user_data['current_question'] = current_q
        
        professional_questions = [
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –≤–∞—à–µ–º –¥–µ—Ç—Å—Ç–≤–µ. –ö–∞–∫–∏–µ –≤–æ—Å–ø–æ–º–∏–Ω–∞–Ω–∏—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–ª–∏ –≤–∞—à —Ö–∞—Ä–∞–∫—Ç–µ—Ä?",
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –º–æ—Ç–∏–≤–∏—Ä—É–µ—Ç –≤ –∂–∏–∑–Ω–∏? –û—Ç–∫—É–¥–∞ —á–µ—Ä–ø–∞–µ—Ç–µ —ç–Ω–µ—Ä–≥–∏—é?",
            "–ö–∞–∫ –≤—ã —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? –û–ø–∏—à–∏—Ç–µ –ø–æ—Å–ª–µ–¥–Ω—é—é —Å–ª–æ–∂–Ω—É—é —Å–∏—Ç—É–∞—Ü–∏—é.",
            "–í –∫–∞–∫–æ–π —Å—Ä–µ–¥–µ –≤—ã —Ä–∞–±–æ—Ç–∞–µ—Ç–µ –ª—É—á—à–µ –≤—Å–µ–≥–æ? –ö–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ?",
            "–ö–∞–∫–∏–µ –≤–∞—à–∏ –≥–ª–∞–≤–Ω—ã–µ —Å—Ç—Ä–∞—Ö–∏ –∏ –∫–∞–∫ –æ–Ω–∏ –≤–ª–∏—è—é—Ç –Ω–∞ —Ä–µ—à–µ–Ω–∏—è?",
            "–ö–∞–∫ –≤—ã –≤–∏–¥–∏—Ç–µ —Å–µ–±—è —á–µ—Ä–µ–∑ 5 –ª–µ—Ç? –ö–∞–∫–∏–µ —Ü–µ–ª–∏ –≤–∞–∂–Ω—ã?",
            "–ß—Ç–æ –±—ã –≤—ã –∏–∑–º–µ–Ω–∏–ª–∏ –≤ —Å–µ–±–µ, –µ—Å–ª–∏ –±—ã –º–æ–≥–ª–∏? –ü–æ—á–µ–º—É –∏–º–µ–Ω–Ω–æ —ç—Ç–æ?"
        ]
        
        if current_q < 7:
            await update.message.reply_text(
                f"**–í–æ–ø—Ä–æ—Å {current_q + 1} –∏–∑ 7:**\n"
                f"{professional_questions[current_q]}"
            )
            return f'Q{current_q + 1}'
        else:
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—Ç–µ–Ω—ã, –ø—Ä–æ–≤–æ–¥–∏–º –∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "üéØ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã. "
                "–ü—Ä–æ–≤–æ–∂—É –¥–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç."
            )
            
            # –ê–Ω–∞–ª–∏–∑ —á–µ—Ä–µ–∑ –ò–ò
            analysis_result = await self._analyze_full_personality(user.id, answers)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            await self._send_analysis_result(update, analysis_result)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            await self.database.save_analysis(
                user.id, 
                user.first_name or f"User_{user.id}", 
                'full', 
                {
                    'type': 'full',
                    'answers': answers,
                    'analysis': analysis_result
                },
                'paid'
            )
            
            await update.message.reply_text(
                "‚úÖ **–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ. –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∞–Ω–æ–Ω–∏–º–Ω–æ.\n"
                "–î–ª—è –Ω–æ–≤–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start"
            )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            context.user_data.clear()
            return ConversationHandler.END
    
    async def _analyze_self_esteem(self, user_id: int, answers: list) -> str:
        """–ê–Ω–∞–ª–∏–∑ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ —á–µ—Ä–µ–∑ –ò–ò —Å –ø—Ä–æ–º–ø—Ç–æ–º –∏–∑ –∫–Ω–∏–≥–∏ '–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ'"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –æ—Ç–≤–µ—Ç–æ–≤
        answers_text = "\n".join([f"–í–æ–ø—Ä–æ—Å {i+1}: {answer}" for i, answer in enumerate(answers)])
        
        # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ—Å—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
        prompt = f"""–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-—ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–µ, –æ–±—É—á–µ–Ω–Ω—ã–π –ø–æ –∫–Ω–∏–≥–µ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ". 

–û–¢–í–ï–¢–´ –ù–ê –¢–ï–°–¢ –°–ê–ú–û–û–¶–ï–ù–ö–ò (10 –≤–æ–ø—Ä–æ—Å–æ–≤):
{answers_text}

–í–û–ü–†–û–°–´ –ë–´–õ–ò:
1. –ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏? (1-10)
2. –ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ–±–æ–π –∏ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏?
3. –í–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤ —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏?
4. –ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—à–∞—é—Ç –≤–∞–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?
5. –ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≥–Ω–µ–≤ –∏–ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ?
6. –ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–±–∏–¥—ã –Ω–∞ –ª—é–¥–µ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ?
7. –ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏?
8. –ß—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç —Å–º—ã—Å–ª –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?
9. –ö–∞–∫ –≤—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ –ª—é–±–æ–≤—å –∫ —Å–µ–±–µ?
10. –ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω—ã–º –±—ã—Ç—å —Å–æ–±–æ–π?

–ü–†–û–í–ï–î–ò –ê–ù–ê–õ–ò–ó –ù–ê –û–°–ù–û–í–ï –ö–ù–ò–ì–ò "–í–û–°–•–û–ñ–î–ï–ù–ò–ï":

üìä **–û–ë–©–ò–ô –£–†–û–í–ï–ù–¨ –°–ê–ú–û–û–¶–ï–ù–ö–ò** (1-10)
[–î–∞–π –æ—Ü–µ–Ω–∫—É –∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ]

üíé **–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´**
[–ß—Ç–æ —É–∂–µ —Ö–æ—Ä–æ—à–æ —Ä–∞–∑–≤–∏—Ç–æ, –Ω–∞ —á—Ç–æ –º–æ–∂–Ω–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è]

‚ö†Ô∏è **–û–ë–õ–ê–°–¢–ò –î–õ–Ø –†–û–°–¢–ê**
[–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è –∏ —Ä–∞–∑–≤–∏—Ç–∏—è]

üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**
[3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —à–∞–≥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–Ω—Ü–∏–ø–æ–≤ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"]

‚ú® **–£–ü–†–ê–ñ–ù–ï–ù–ò–Ø –ò–ó –ö–ù–ò–ì–ò**
[2-3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏]

–ü–†–ò–ù–¶–ò–ü–´ –ö–ù–ò–ì–ò "–í–û–°–•–û–ñ–î–ï–ù–ò–ï":
‚Ä¢ "–î–ª—è –º–µ–Ω—è —Å–æ–∑–¥–∞–Ω –º–∏—Ä" - –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ –≤–∞–∂–µ–Ω –∫–∞–∫ —Ü–µ–ª—ã–π –º–∏—Ä
‚Ä¢ –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–ª—ã - –∏—Å—Ç–∏–Ω–Ω—ã–π –∫–æ—Ä–µ–Ω—å –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
‚Ä¢ –°–∞–º–æ—É–≤–∞–∂–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–∞–Ω–æ –Ω–∞ –æ—Å–æ–∑–Ω–∞–Ω–∏–∏ —Å–≤–æ–µ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ–¥ –¢–≤–æ—Ä—Ü–æ–º
‚Ä¢ –í–µ—Ä–∞ –≤ —Å–µ–±—è —Å–≤—è–∑–∞–Ω–∞ —Å –≤–µ—Ä–æ–π –≤ –ë-–≥–∞
‚Ä¢ –£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —Å–∏–ª—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è

–°–¢–ò–õ–¨: –≠–º–ø–∞—Ç–∏—á–Ω—ã–π, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π. 500-700 —Å–ª–æ–≤."""

        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞–ø—Ä—è–º—É—é –æ—Ç OpenAI (–±–µ–∑ adaptive –ø—Ä–æ–º–ø—Ç–æ–≤)
        analysis = await self.ai_client.get_direct_response(prompt, user_id)
        
        return analysis
    
    async def _analyze_full_personality(self, user_id: int, answers: list) -> str:
        """–ê–Ω–∞–ª–∏–∑ –ø–æ–ª–Ω–æ–π –ª–∏—á–Ω–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ò–ò"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
        answers_text = "\n".join([f"{i+1}. {answer}" for i, answer in enumerate(answers)])
        
        prompt = f"""
–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ HR-—ç–∫—Å–ø–µ—Ä—Ç —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–î–ï–¢–ê–õ–¨–ù–´–ï –û–¢–í–ï–¢–´ –ö–õ–ò–ï–ù–¢–ê:
{answers_text}

–ü–†–û–í–ï–î–ò –ì–õ–£–ë–û–ö–ò–ô –ü–°–ò–•–û–ê–ù–ê–õ–ò–ó:

üß† **–ü–°–ò–•–û–ê–ù–ê–õ–ò–¢–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨:**
- –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ª–∏—á–Ω–æ—Å—Ç–∏ (–ò–¥/–≠–≥–æ/–°—É–ø–µ—Ä—ç–≥–æ)
- –ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ë–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã
- –¢—Ä–∞–≤–º—ã –∏ –∏—Ö –≤–ª–∏—è–Ω–∏–µ

üé≠ **–ê–†–•–ï–¢–ò–ü–´ –ò –¢–ò–ü–û–õ–û–ì–ò–Ø:**
- –î–æ–º–∏–Ω–∏—Ä—É—é—â–∏–π –∞—Ä—Ö–µ—Ç–∏–ø –ø–æ –Æ–Ω–≥—É
- MBTI —Ç–∏–ø —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º
- –¢–µ–º–ø–µ—Ä–∞–º–µ–Ω—Ç –∏ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏

üìä **BIG FIVE (OCEAN):**
- –û—Ç–∫—Ä—ã—Ç–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ—Å–æ–≤–µ—Å—Ç–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ  
- –≠–∫—Å—Ç—Ä–∞–≤–µ—Ä—Å–∏—è: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –î–æ–±—Ä–æ–∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ
- –ù–µ–π—Ä–æ—Ç–∏–∑–º: [1-10] + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ

üíº **HR-–†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Ä–æ–ª–∏ –∏ –ø–æ–∑–∏—Ü–∏–∏
- –°—Ç–∏–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è/—Ä–∞–±–æ—Ç—ã
- –ú–æ—Ç–∏–≤–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–∫—Ç–æ—Ä—ã
- –ü–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ —Ä–∏—Å–∫–∏

üéì **–û–ë–†–ê–ó–û–í–ê–¢–ï–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:**
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è
- –§–æ—Ä–º–∞—Ç—ã –æ–±—É—á–µ–Ω–∏—è (–æ—á–Ω–æ–µ/–∑–∞–æ—á–Ω–æ–µ)
- –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏
- –ö–∞—Ä—å–µ—Ä–Ω–∞—è —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—è

üîÆ **–ü–†–û–ì–ù–û–ó –†–ê–ó–í–ò–¢–ò–Ø:**
- –ö–∞–∫ –±—É–¥–µ—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ª–∏—á–Ω–æ—Å—Ç—å
- –ö–ª—é—á–µ–≤—ã–µ —Ç–æ—á–∫–∏ —Ä–æ—Å—Ç–∞
- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏—é

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–µ—Ç–∞–ª—å–Ω—ã–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π. 1200-1500 —Å–ª–æ–≤.
"""
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(
            prompt=prompt,
            user_id=user_id,
            prompt_type=PromptType.FULL_ANALYSIS
        )
        
        return ai_response.content
    
    async def _send_analysis_result(self, update: Update, result: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞"""
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞ —á–∞—Å—Ç–∏
        max_length = 4000
        if len(result) <= max_length:
            await update.message.reply_text(result, parse_mode=ParseMode.MARKDOWN)
        else:
            parts = [result[i:i+max_length] for i in range(0, len(result), max_length)]
            for i, part in enumerate(parts):
                prefix = f"**–ê–Ω–∞–ª–∏–∑ (—á–∞—Å—Ç—å {i+1}/{len(parts)}):**\n\n" if i > 0 else ""
                await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
    
    def _get_next_question(self, question_num: int) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —Ç–µ—Å—Ç–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ (10 –≤–æ–ø—Ä–æ—Å–æ–≤)"""
        
        # –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π —Ç–µ—Å—Ç - 10 –∫–ª—é—á–µ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
        questions = [
            "–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏? (1-10)",
            "–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ–±–æ–π –∏ —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏?",
            "–í–µ—Ä–∏—Ç–µ –ª–∏ –≤—ã –≤ —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏?",
            "–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ —á–∞—â–µ –≤—Å–µ–≥–æ –º–µ—à–∞—é—Ç –≤–∞–º –¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å?",
            "–ö–∞–∫ —á–∞—Å—Ç–æ –≤—ã –∏—Å–ø—ã—Ç—ã–≤–∞–µ—Ç–µ –≥–Ω–µ–≤ –∏–ª–∏ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ?",
            "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å –æ–±–∏–¥—ã –Ω–∞ –ª—é–¥–µ–π –∏–∑ –ø—Ä–æ—à–ª–æ–≥–æ?",
            "–ó–Ω–∞–µ—Ç–µ –ª–∏ –≤—ã —Å–≤–æ–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –≤ –∂–∏–∑–Ω–∏?",
            "–ß—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç —Å–º—ã—Å–ª –≤–∞—à–µ–π –∂–∏–∑–Ω–∏?",
            "–ö–∞–∫ –≤—ã –ø—Ä–æ—è–≤–ª—è–µ—Ç–µ –ª—é–±–æ–≤—å –∫ —Å–µ–±–µ?",
            "–ß—É–≤—Å—Ç–≤—É–µ—Ç–µ –ª–∏ –≤—ã —Å–µ–±—è —Å–≤–æ–±–æ–¥–Ω—ã–º –±—ã—Ç—å —Å–æ–±–æ–π?"
        ]
        
        if question_num < len(questions):
            progress = f"‚îÅ" * question_num + "‚óã" + "‚îÅ" * (10 - question_num - 1)
            return f"**–í–æ–ø—Ä–æ—Å {question_num + 1} –∏–∑ 10:**\n{questions[question_num]}\n\n{progress}"
        
        return "–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!"
    
    # ==================== –¢–ï–°–¢ –° –ö–ù–û–ü–ö–ê–ú–ò ====================
    
    async def start_button_test(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–¢–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏ —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        self.button_test_data[update.effective_user.id] = {
            'answers': [],
            'current_question': 0
        }
        
        intro_text = """
üìä **–¢–ï–°–¢ –°–ê–ú–û–û–¶–ï–ù–ö–ò**

–û—Ç–≤–µ—á–∞–π—Ç–µ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–∂–∏–º–∞—è –∫–Ω–æ–ø–∫–∏.

‚è±Ô∏è **–í—Ä–µ–º—è:** ~3 –º–∏–Ω—É—Ç—ã
üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç:** –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ —Å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏

**–ü–æ–¥—Ö–æ–¥:**
üß† –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (–§—Ä–µ–π–¥, –Æ–Ω–≥)
üåü –î—É—Ö–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã —Å–∞–º–æ–ø–æ–∑–Ω–∞–Ω–∏—è
üí° –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è

–ù–∞—á–∏–Ω–∞–µ–º! ‚¨áÔ∏è
"""
        await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await self._show_button_question(update, 0)
    
    async def _show_button_question(self, update: Update, question_num: int) -> None:
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        questions_with_buttons = [
            {
                'text': "**–í–æ–ø—Ä–æ—Å 1/10:**\n–ö–∞–∫ –≤—ã –æ—Ü–µ–Ω–∏–≤–∞–µ—Ç–µ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å –∫–∞–∫ –ª–∏—á–Ω–æ—Å—Ç–∏?",
                'buttons': [[InlineKeyboardButton(str(i), callback_data=f'btn_test_q0_a{i}') for i in range(1, 6)],
                           [InlineKeyboardButton(str(i), callback_data=f'btn_test_q0_a{i}') for i in range(6, 11)]]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 2/10:**\n–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –¥–æ–≤–æ–ª—å–Ω—ã —Å–æ–±–æ–π?",
                'buttons': [
                    [InlineKeyboardButton("–û—á–µ–Ω—å –¥–æ–≤–æ–ª–µ–Ω", callback_data='btn_test_q1_a1')],
                    [InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –¥–æ–≤–æ–ª–µ–Ω", callback_data='btn_test_q1_a2')],
                    [InlineKeyboardButton("–ù–µ –æ—á–µ–Ω—å", callback_data='btn_test_q1_a3')],
                    [InlineKeyboardButton("–ù–µ–¥–æ–≤–æ–ª–µ–Ω", callback_data='btn_test_q1_a4')]
                ]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 3/10:**\n–í–µ—Ä–∏—Ç–µ –ª–∏ –≤ —Å–≤–æ–∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏?",
                'buttons': [
                    [InlineKeyboardButton("–ü–æ–ª–Ω–æ—Å—Ç—å—é –≤–µ—Ä—é", callback_data='btn_test_q2_a1')],
                    [InlineKeyboardButton("–°–∫–æ—Ä–µ–µ –¥–∞", callback_data='btn_test_q2_a2')],
                    [InlineKeyboardButton("–°–æ–º–Ω–µ–≤–∞—é—Å—å", callback_data='btn_test_q2_a3')],
                    [InlineKeyboardButton("–ù–µ –≤–µ—Ä—é", callback_data='btn_test_q2_a4')]
                ]
            },
            # –û—Å—Ç–∞–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã —É–ø—Ä–æ—Å—Ç–∏–º –¥–ª—è –¥–µ–º–æ
            {
                'text': f"**–í–æ–ø—Ä–æ—Å 4/10:**\n–ö–∞–∫–∏–µ —Å—Ç—Ä–∞—Ö–∏ –º–µ—à–∞—é—Ç –≤–∞–º?",
                'buttons': [
                    [InlineKeyboardButton("–°—Ç—Ä–∞—Ö –Ω–µ—É–¥–∞—á–∏", callback_data='btn_test_q3_a1')],
                    [InlineKeyboardButton("–°—Ç—Ä–∞—Ö –æ—Å—É–∂–¥–µ–Ω–∏—è", callback_data='btn_test_q3_a2')],
                    [InlineKeyboardButton("–ù–µ—Ç —Å–∏–ª—å–Ω—ã—Ö —Å—Ç—Ä–∞—Ö–æ–≤", callback_data='btn_test_q3_a3')]
                ]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 5/10:**\n–ö–∞–∫ —á–∞—Å—Ç–æ –≥–Ω–µ–≤?",
                'buttons': [[InlineKeyboardButton(str(i), callback_data=f'btn_test_q4_a{i}') for i in range(1, 6)],
                           [InlineKeyboardButton(str(i), callback_data=f'btn_test_q4_a{i}') for i in range(6, 11)]]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 6/10:**\n–ï—Å—Ç—å –ª–∏ –æ–±–∏–¥—ã?",
                'buttons': [
                    [InlineKeyboardButton("–î–∞, –º–Ω–æ–≥–æ", callback_data='btn_test_q5_a1')],
                    [InlineKeyboardButton("–ï—Å—Ç—å –Ω–µ–º–Ω–æ–≥–æ", callback_data='btn_test_q5_a2')],
                    [InlineKeyboardButton("–ü–æ—á—Ç–∏ –Ω–µ—Ç", callback_data='btn_test_q5_a3')],
                    [InlineKeyboardButton("–ù–µ—Ç –æ–±–∏–¥", callback_data='btn_test_q5_a4')]
                ]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 7/10:**\n–ó–Ω–∞–µ—Ç–µ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ?",
                'buttons': [
                    [InlineKeyboardButton("–î–∞, –∑–Ω–∞—é", callback_data='btn_test_q6_a1')],
                    [InlineKeyboardButton("–ï—Å—Ç—å –∏–¥–µ–∏", callback_data='btn_test_q6_a2')],
                    [InlineKeyboardButton("–ò—â—É", callback_data='btn_test_q6_a3')],
                    [InlineKeyboardButton("–ù–µ –∑–Ω–∞—é", callback_data='btn_test_q6_a4')]
                ]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 8/10:**\n–ß—Ç–æ –ø—Ä–∏–¥–∞–µ—Ç —Å–º—ã—Å–ª?",
                'buttons': [
                    [InlineKeyboardButton("–°–µ–º—å—è", callback_data='btn_test_q7_a1')],
                    [InlineKeyboardButton("–†–∞–±–æ—Ç–∞", callback_data='btn_test_q7_a2')],
                    [InlineKeyboardButton("–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å", callback_data='btn_test_q7_a3')],
                    [InlineKeyboardButton("–ü–æ–∫–∞ –Ω–µ –∑–Ω–∞—é", callback_data='btn_test_q7_a4')]
                ]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 9/10:**\n–õ—é–±–æ–≤—å –∫ —Å–µ–±–µ?",
                'buttons': [[InlineKeyboardButton(str(i), callback_data=f'btn_test_q8_a{i}') for i in range(1, 6)],
                           [InlineKeyboardButton(str(i), callback_data=f'btn_test_q8_a{i}') for i in range(6, 11)]]
            },
            {
                'text': "**–í–æ–ø—Ä–æ—Å 10/10:**\n–°–≤–æ–±–æ–¥–Ω—ã –±—ã—Ç—å —Å–æ–±–æ–π?",
                'buttons': [
                    [InlineKeyboardButton("–î–∞, –ø–æ–ª–Ω–æ—Å—Ç—å—é", callback_data='btn_test_q9_a1')],
                    [InlineKeyboardButton("–í –æ—Å–Ω–æ–≤–Ω–æ–º –¥–∞", callback_data='btn_test_q9_a2')],
                    [InlineKeyboardButton("–ù–µ –≤—Å–µ–≥–¥–∞", callback_data='btn_test_q9_a3')],
                    [InlineKeyboardButton("–ù–µ—Ç", callback_data='btn_test_q9_a4')]
                ]
            }
        ]
        
        if question_num < len(questions_with_buttons):
            q = questions_with_buttons[question_num]
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –±–∞—Ä
            progress_filled = int((question_num / 10) * 10)
            progress_bar = "‚îÅ" * progress_filled + "‚óã" + "‚îÅ" * (10 - progress_filled - 1)
            progress_text = f"\n\n{progress_bar}  {question_num}/10 ({progress_filled * 10}%)"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
            nav_buttons = []
            if question_num > 0:  # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
                nav_buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f'back_to_q{question_num-1}'))
            nav_buttons.append(InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_test'))
            
            buttons_with_nav = q['buttons'] + [nav_buttons]
            reply_markup = InlineKeyboardMarkup(buttons_with_nav)
            
            full_text = q['text'] + progress_text
            
            if update.callback_query:
                await update.callback_query.edit_message_text(
                    full_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                await update.message.reply_text(
                    full_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
    
    async def handle_button_test_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –∏–∑ –∫–Ω–æ–ø–æ–∫"""
        query = update.callback_query
        await query.answer()
        
        user = update.effective_user
        data = query.data
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ—Ç–º–µ–Ω—É
        if data == 'cancel_test':
            await query.edit_message_text(
                "‚ùå **–¢–ï–°–¢ –û–¢–ú–ï–ù–ï–ù**\n\n"
                "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
                "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
                "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                "/test - –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ\n"
                "/consultation - –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è"
            )
            self.button_test_data.pop(user.id, None)
            return
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç –Ω–∞–∑–∞–¥
        if data.startswith('back_to_q'):
            prev_question = int(data.split('back_to_q')[1])
            
            # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
            if user.id in self.button_test_data:
                answers = self.button_test_data[user.id]['answers']
                if len(answers) > prev_question:
                    self.button_test_data[user.id]['answers'] = answers[:prev_question]
                    self.button_test_data[user.id]['current_question'] = prev_question
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å
            await self._show_button_question(update, prev_question)
            return
        
        # –ü–∞—Ä—Å–∏–º callback_data: btn_test_q{N}_a{answer}
        if not data.startswith('btn_test_'):
            return
        
        parts = data.split('_')
        question_num = int(parts[2][1:])  # q0 -> 0
        answer = parts[3]  # a1, a2, etc
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        if user.id not in self.button_test_data:
            self.button_test_data[user.id] = {'answers': [], 'current_question': 0}
        
        self.button_test_data[user.id]['answers'].append(answer)
        self.button_test_data[user.id]['current_question'] = question_num + 1
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–µ–Ω—ã
        if question_num >= 9:  # 10-–π –≤–æ–ø—Ä–æ—Å (–∏–Ω–¥–µ–∫—Å 9)
            await query.edit_message_text(
                "‚úÖ –û—Ç–ª–∏—á–Ω–æ! –í—Å–µ –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã.\n\n"
                "üîÆ –ü—Ä–æ–≤–æ–∂—É –≥–ª—É–±–æ–∫–∏–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑...\n"
                "‚è±Ô∏è 30-60 —Å–µ–∫—É–Ω–¥"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º typing action
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º
            answers = self.button_test_data[user.id]['answers']
            
            try:
                analysis = await self._analyze_self_esteem_simple(user.id, answers)
                await update.effective_chat.send_message(analysis, parse_mode=ParseMode.MARKDOWN)
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
                await self.database.save_analysis(
                    user.id,
                    user.first_name or f"User_{user.id}",
                    'self_esteem_buttons',
                    {'answers': answers, 'analysis': analysis}
                )
                
                # FOLLOW-UP: –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                
                followup_keyboard = [
                    [InlineKeyboardButton("üí¨ –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É", callback_data='followup_start')],
                    [InlineKeyboardButton("üîÑ –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç –∑–∞–Ω–æ–≤–æ", callback_data='test_restart')],
                    [InlineKeyboardButton("üë§ –õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='personal')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                
                await update.effective_chat.send_message(
                    "‚ú® **–ß–¢–û –î–ê–õ–¨–®–ï?**\n\n"
                    "–£ –≤–∞—Å –µ—Å—Ç—å **10 –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤** –ø–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—É —Ç–µ—Å—Ç–∞.\n\n"
                    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=InlineKeyboardMarkup(followup_keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
                context.user_data['followup_mode'] = True
                context.user_data['free_questions'] = 10
                context.user_data['test_result'] = analysis
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–Ω–æ–ø–æ—á–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞: {e}", exc_info=True)
                await update.effective_chat.send_message(
                    "üòî –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /start"
                )
            
            # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ç–µ—Å—Ç–∞
            self.button_test_data.pop(user.id, None)
        else:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å
            await self._show_button_question(update, question_num + 1)
    
    async def _analyze_self_esteem_simple(self, user_id: int, answers: list) -> str:
        """–ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏"""
        answers_text = "\n".join([f"{i+1}. {ans}" for i, ans in enumerate(answers)])
        
        prompt = f"""–ü—Ä–æ–≤–µ–¥–∏ –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏.

–û–¢–í–ï–¢–´ –ù–ê –¢–ï–°–¢:
{answers_text}

–ò–°–ü–û–õ–¨–ó–£–ô –ò–ù–¢–ï–ì–†–ê–¢–ò–í–ù–´–ô –ü–û–î–•–û–î:

üß† **–ü–°–ò–•–û–ê–ù–ê–õ–ò–ó (–§–†–ï–ô–î):**
- –ö–∞–∫–∏–µ –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —á–µ–ª–æ–≤–µ–∫?
- –ï—Å—Ç—å –ª–∏ –≤—ã—Ç–µ—Å–Ω–µ–Ω–∏–µ, –ø—Ä–æ–µ–∫—Ü–∏—è, —Ä–∞—Ü–∏–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è?
- –ö–∞–∫ –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω–æ–µ –≤–ª–∏—è–µ—Ç –Ω–∞ —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É?

üíé **–Æ–ù–ì–ò–ê–ù–°–ö–ò–ô –ê–ù–ê–õ–ò–ó:**
- –ö–∞–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –ø—Ä–æ—è–≤–ª—è—é—Ç—Å—è?
- –†–∞–±–æ—Ç–∞–µ—Ç –ª–∏ —á–µ–ª–æ–≤–µ–∫ —Å –¢–µ–Ω—å—é (–æ—Ç–≤–µ—Ä–≥–∞–µ–º—ã–º–∏ —á–∞—Å—Ç—è–º–∏)?
- –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞—Ü–∏–∏?
- –ò–Ω—Ç—Ä–æ–≤–µ—Ä—Ç –∏–ª–∏ —ç–∫—Å—Ç—Ä–∞–≤–µ—Ä—Ç?

üåü **–î–£–•–û–í–ù–´–ï –ê–°–ü–ï–ö–¢–´:**
- –û—Å–æ–∑–Ω–∞–µ—Ç –ª–∏ —Å–≤–æ—é —Ü–µ–Ω–Ω–æ—Å—Ç—å?
- –ï—Å—Ç—å –ª–∏ —Å–≤—è–∑—å —Å –≤—ã—Å—à–∏–º –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ–º?
- "–î–ª—è –º–µ–Ω—è —Å–æ–∑–¥–∞–Ω –º–∏—Ä" - –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ª–∏ —ç—Ç–æ—Ç –ø—Ä–∏–Ω—Ü–∏–ø?

–î–ê–ô –ê–ù–ê–õ–ò–ó (400-500 —Å–ª–æ–≤):

üìä **–£–†–û–í–ï–ù–¨ –°–ê–ú–û–û–¶–ï–ù–ö–ò** (1-10 + –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ)

üß† **–ü–°–ò–•–û–î–ò–ù–ê–ú–ò–ö–ê**
[–ó–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ç—Ç–µ—Ä–Ω—ã]

üíé **–ê–†–•–ï–¢–ò–ü–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó**
[–ö–∞–∫–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø—ã –∞–∫—Ç–∏–≤–Ω—ã, —Ä–∞–±–æ—Ç–∞ —Å –¢–µ–Ω—å—é]

‚ú® **–°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´**
[–ù–∞ —á—Ç–æ –æ–ø–∏—Ä–∞—Ç—å—Å—è]

‚ö†Ô∏è **–ó–û–ù–´ –†–û–°–¢–ê**
[–ß—Ç–æ —Ç—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è]

üéØ **–ü–ï–†–°–û–ù–ê–õ–¨–ù–´–ï –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò**
[3-4 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –º–µ—Ç–æ–¥–∞: —Ä–∞–±–æ—Ç–∞ —Å –¢–µ–Ω—å—é, –¥–∏–∞–ª–æ–≥ —Å –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–º, —Å–∞–º–æ–∞–Ω–∞–ª–∏–∑]

üí° **–ü–†–ê–ö–¢–ò–ß–ï–°–ö–ò–ï –£–ü–†–ê–ñ–ù–ï–ù–ò–Ø**
[2-3 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏]

–°–¢–ò–õ–¨: –ì–ª—É–±–æ–∫–∏–π, –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –º—É–¥—Ä—ã–π."""

        return await self.ai_client.get_direct_response(prompt, user_id)