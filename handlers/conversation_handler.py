"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ai.adaptive_prompt_manager import PromptType
from ai.security_manager import SecurityManager

logger = logging.getLogger(__name__)

class BotConversationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    def __init__(self, ai_client, database):
        self.ai_client = ai_client
        self.database = database
        self.conversation_history = {}  # user_id -> list of messages
        self.free_consultation_tracker = {}  # user_id -> {'count': int, 'max': 7}
        self.security_manager = SecurityManager()  # –ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ.")
            return 'WAITING_MESSAGE'
        
        # üîí –ü–†–û–í–ï–†–ö–ò –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò
        
        # 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        is_allowed, reason = self.security_manager.check_user_behavior(user.id)
        if not is_allowed:
            await update.message.reply_text(f"‚ö†Ô∏è {reason}")
            return 'WAITING_MESSAGE'
        
        # 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting
        is_allowed, reason = self.security_manager.check_rate_limit(user.id)
        if not is_allowed:
            await update.message.reply_text(f"‚è∞ {reason}")
            return 'WAITING_MESSAGE'
        
        # 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
        is_spam, reason = self.security_manager.check_spam_patterns(user.id, text)
        if is_spam:
            await update.message.reply_text(f"üö´ {reason}")
            return 'WAITING_MESSAGE'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
        if '–∑–∞–ø–∏—Å–∞—Ç—å' in text.lower() and '–∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü' in text.lower():
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
                [InlineKeyboardButton("üìä –¢–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏", callback_data='test_samoocenka')]
            ]
            
            await update.message.reply_text(
                "üìù **–ó–ê–ü–ò–°–¨ –ù–ê –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Æ**\n\n"
                "–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å!\n\n"
                "üíº **–î–ª—è –∑–∞–ø–∏—Å–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å:**\n"
                "üìß Email: [—É–∫–∞–∂–∏—Ç–µ –≤–∞—à email]\n"
                "üì± Telegram: @[–≤–∞—à username]\n"
                "‚òéÔ∏è –¢–µ–ª–µ—Ñ–æ–Ω: [—É–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä]\n\n"
                "üîî –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
            return 'WAITING_MESSAGE'
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ "1" –∏ "2" (–∏–∑ —Å–ø—Ä–∞–≤–∫–∏)
        if text.strip() == "1":
            await update.message.reply_text(
                "üìä **–¢–ï–°–¢ –°–ê–ú–û–û–¶–ï–ù–ö–ò**\n\n"
                "–û—Ç–ª–∏—á–Ω–æ! –ó–∞–ø—É—Å–∫–∞—é —Ç–µ—Å—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É: /test",
                parse_mode=ParseMode.MARKDOWN
            )
            return 'WAITING_MESSAGE'
            
        elif text.strip() == "2":
            # –ó–∞–ø—É—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
            await self._start_structured_consultation(update, context)
            return 'STRUCTURED_CONSULTATION'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏–º—Å—è –ª–∏ –≤ —Ä–µ–∂–∏–º–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if context.user_data.get('consultation_type') == 'structured':
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –æ—Ç–º–µ–Ω—ã –∏ –≤–æ–∑–≤—Ä–∞—Ç–∞
            text_lower = text.lower().strip()
            if text_lower in ['–æ—Ç–º–µ–Ω–∞', '–æ—Ç–º–µ–Ω–∏—Ç—å', 'cancel', '—Å—Ç–æ–ø', '—Ö–≤–∞—Ç–∏—Ç']:
                context.user_data.clear()
                await update.message.reply_text(
                    "‚ùå **–ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø –û–¢–ú–ï–ù–ï–ù–ê**\n\n"
                    "–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã –Ω–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n\n"
                    "–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?\n"
                    "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
                    "/test - –¢–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏\n"
                    "/consultation - –ù–∞—á–∞—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é –∑–∞–Ω–æ–≤–æ",
                    parse_mode=ParseMode.MARKDOWN
                )
                return 'WAITING_MESSAGE'
            
            if text_lower in ['–Ω–∞–∑–∞–¥', 'back', '–ø—Ä–µ–¥—ã–¥—É—â–∏–π']:
                current_q = context.user_data.get('current_question', 0)
                if current_q > 0:
                    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
                    prev_question = current_q - 1
                    context.user_data['current_question'] = prev_question
                    
                    # –£–¥–∞–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç
                    answers = context.user_data.get('consultation_answers', [])
                    if len(answers) > prev_question:
                        context.user_data['consultation_answers'] = answers[:prev_question]
                    
                    await self._ask_consultation_question(update, context)
                    return 'STRUCTURED_CONSULTATION'
                else:
                    await update.message.reply_text("–í—ã –Ω–∞ –ø–µ—Ä–≤–æ–º –≤–æ–ø—Ä–æ—Å–µ. –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é: –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'")
                    return 'STRUCTURED_CONSULTATION'
            
            return await self._handle_consultation_answer(update, context)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id not in self.conversation_history:
            self.conversation_history[user.id] = []
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç—Ä–µ–∫–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        if user.id not in self.free_consultation_tracker:
            self.free_consultation_tracker[user.id] = {'count': 0, 'max': 7}
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ follow-up —Ä–µ–∂–∏–º)
        if not context.user_data.get('followup_mode'):
            tracker = self.free_consultation_tracker[user.id]
            if tracker['count'] >= tracker['max']:
                # –õ–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                
                keyboard = [
                    [InlineKeyboardButton("üíº –õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='personal')],
                    [InlineKeyboardButton("üìä –ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data='test_samoocenka')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                
                await update.message.reply_text(
                    f"‚ö†Ô∏è **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏—Å—á–µ—Ä–ø–∞–Ω–∞ ({tracker['count']}/{tracker['max']})**\n\n"
                    f"–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å?\n\n"
                    f"üíº **–õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):**\n"
                    f"‚Ä¢ –î–æ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏\n"
                    f"‚Ä¢ GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n"
                    f"‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n"
                    f"–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ: –æ—Ç 500‚ÇΩ",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
                return 'WAITING_MESSAGE'
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history[user.id].append(text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.conversation_history[user.id]) > 20:
            self.conversation_history[user.id] = self.conversation_history[user.id][-20:]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—á–∏
        patterns = self._analyze_speech_patterns(text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if patterns['cancellation']:
            return await self._handle_cancellation(update, context)
        
        if patterns['topic_change']:
            return await self._handle_topic_change(update, context)
        
        if patterns['self_introduction_request']:
            return await self._handle_self_introduction(update, context)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
        if self._is_direct_question(text):
            response_type = self._determine_response_type(patterns, text)
            try:
                response = await self._get_ai_response(user.id, text, response_type)
                await self._send_response(update, response)
                return 'WAITING_MESSAGE'
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return 'WAITING_MESSAGE'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        response_type = self._determine_response_type(patterns, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-3.5 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏)
            response = await self._get_ai_response(user.id, text, response_type)
            
            # 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ (–ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞)
            estimated_tokens = len(text.split()) * 1.3 + len(response.split()) * 1.3  # –ü—Ä–∏–º–µ—Ä–Ω–∞—è –æ—Ü–µ–Ω–∫–∞
            is_allowed, reason = self.security_manager.check_token_limit(user.id, int(estimated_tokens))
            if not is_allowed:
                await thinking_msg.delete()
                await update.message.reply_text(f"üí∞ {reason}")
                return 'WAITING_MESSAGE'
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await thinking_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._send_response(update, response)
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ –Ω–µ follow-up —Ä–µ–∂–∏–º)
            if not context.user_data.get('followup_mode'):
                self.free_consultation_tracker[user.id]['count'] += 1
                remaining = self.free_consultation_tracker[user.id]['max'] - self.free_consultation_tracker[user.id]['count']
                
                from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                
                # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                keyboard = [
                    [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data='end_consultation')],
                    [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                ]
                
                await update.message.reply_text(
                    f"üí° **–ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:** {self.free_consultation_tracker[user.id]['count']}/{self.free_consultation_tracker[user.id]['max']}\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å: **{remaining} –≤–æ–ø—Ä–æ—Å–æ–≤**\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # PREMIUM FEATURE: –ö–Ω–æ–ø–∫–∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã (—Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –≤ premium_consultation.py)
            
            # FOLLOW-UP –†–ï–ñ–ò–ú: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ (–ø–æ—Å–ª–µ —Ç–µ—Å—Ç–∞)
            if context.user_data.get('followup_mode'):
                free_q = context.user_data.get('free_questions', 0)
                if free_q > 0:
                    free_q -= 1
                    context.user_data['free_questions'] = free_q
                    
                    if free_q > 0:
                        await update.message.reply_text(
                            f"üí° –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: **{free_q}/10**",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        # –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é
                        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                        
                        keyboard = [
                            [InlineKeyboardButton("üíº –õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='personal')],
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                        ]
                        
                        await update.message.reply_text(
                            "‚ö†Ô∏è **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å (10/10)**\n\n"
                            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É?\n\n"
                            "üíº **–õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ):**\n"
                            "‚Ä¢ –î–æ 15 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ—Å—Å–∏–∏\n"
                            "‚Ä¢ GPT-4 –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤\n"
                            "‚Ä¢ –ö–Ω–æ–ø–∫–∞ '–ù–∞–∑–∞–¥' –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è\n\n"
                            "–û—Ä–∏–µ–Ω—Ç–∏—Ä–æ–≤–æ—á–Ω–æ: –æ—Ç 500‚ÇΩ",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode=ParseMode.MARKDOWN
                        )
                        context.user_data.pop('followup_mode', None)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return 'WAITING_MESSAGE'
    
    async def _start_structured_consultation(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user = update.effective_user
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏
        context.user_data['consultation_type'] = 'structured'
        context.user_data['consultation_answers'] = []
        context.user_data['current_question'] = 0
        context.user_data['consultation_questions'] = [
            "–ß—Ç–æ –≤–∞—Å –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –±–µ—Å–ø–æ–∫–æ–∏—Ç –≤ —Å–µ–±–µ? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "–ö–∞–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞ –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã —Ä–∞–∑–≤–∏—Ç—å? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)", 
            "–ß—Ç–æ –º–µ—à–∞–µ—Ç –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "–ö–∞–∫ –≤—ã –æ–±—ã—á–Ω–æ —Å–ø—Ä–∞–≤–ª—è–µ—Ç–µ—Å—å —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "–ß—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "–ö–∞–∫–∏–µ —É –≤–∞—Å –µ—Å—Ç—å –º–µ—á—Ç—ã –∏–ª–∏ —Ü–µ–ª–∏? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)",
            "–ß—Ç–æ –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –≤ —Å–≤–æ–µ–π –∂–∏–∑–Ω–∏? (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)"
        ]
        
        intro_text = """
üí¨ **–ë–ï–°–ü–õ–ê–¢–ù–ê–Ø –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–Ø** (7 –≤–æ–ø—Ä–æ—Å–æ–≤)

–û—Ç–≤–µ—á–∞–π—Ç–µ –∫—Ä–∞—Ç–∫–æ –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è).

**–ü—Ä–∏–Ω—Ü–∏–ø—ã:** –ö–Ω–∏–≥–∞ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
**–ú–æ–¥–µ–ª—å:** GPT-3.5 (—ç–∫–æ–Ω–æ–º–∏—á–Ω–∞—è)
**–†–µ–∑—É–ª—å—Ç–∞—Ç:** –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏

–ù–∞—á–∏–Ω–∞–µ–º! ‚¨áÔ∏è
"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            # –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text
            await update.callback_query.edit_message_text(intro_text, parse_mode=ParseMode.MARKDOWN)
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
            await update.message.reply_text(intro_text, parse_mode=ParseMode.MARKDOWN)
        
        await self._ask_consultation_question(update, context)
    
    async def _ask_consultation_question(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        current_q = context.user_data.get('current_question', 0)
        questions = context.user_data.get('consultation_questions', [])
        
        if current_q >= len(questions):
            # –í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–¥–∞–Ω—ã - –¥–µ–ª–∞–µ–º –∞–Ω–∞–ª–∏–∑
            await self._analyze_consultation_answers(update, context)
            return
        
        question_text = f"**–í–æ–ø—Ä–æ—Å {current_q + 1}/7:**\n{questions[current_q]}"
        progress = "üü©" * (current_q + 1) + "‚¨ú" * (len(questions) - current_q - 1)
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
        
        keyboard = []
        
        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        if current_q > 0:
            keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–µ–¥—ã–¥—É—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É", callback_data=f'consultation_back_{current_q - 1}')])
        
        # –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
        keyboard.append([InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='cancel_consultation')])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ callback query –∏–ª–∏ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.callback_query:
            # –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await update.callback_query.message.reply_text(
                f"{question_text}\n\n{progress}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
            await update.message.reply_text(
                f"{question_text}\n\n{progress}",
                reply_markup=InlineKeyboardMarkup(keyboard),
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def _analyze_consultation_answers(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ê–Ω–∞–ª–∏–∑ –æ—Ç–≤–µ—Ç–æ–≤ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user = update.effective_user
        answers = context.user_data.get('consultation_answers', [])
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
        analysis_prompt = f"""–¢—ã –ø—Å–∏—Ö–æ–ª–æ–≥ –ø–æ –∫–Ω–∏–≥–µ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ". 

–û–¢–í–ï–¢–´ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø:
{chr(10).join([f"–í–æ–ø—Ä–æ—Å {i+1}: {answers[i]}" for i in range(len(answers))])}

–ó–ê–î–ê–ß–ê: –î–∞–π –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ (100-150 —Å–ª–æ–≤) —Å 2-3 –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.

–§–û–†–ú–ê–¢:
üíô –ü–æ–Ω–∏–º–∞–Ω–∏–µ —Å–∏—Ç—É–∞—Ü–∏–∏
üí° 2-3 –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ç–∞ –∏–∑ –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ"
üéØ –°–ª–µ–¥—É—é—â–∏–π —à–∞–≥

–°–¢–ò–õ–¨: –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –ø—Ä–∞–∫—Ç–∏—á–Ω—ã–π, –∫—Ä–∞—Ç–∫–∏–π."""
        
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            thinking_msg = await update.message.reply_text("ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã...")
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑
            analysis = await self.ai_client.get_direct_response(analysis_prompt, user.id)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await thinking_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if update.callback_query:
                # –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(
                    f"üìã **–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò**\n\n{analysis}",
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
                await update.message.reply_text(
                    f"üìã **–†–ï–ó–£–õ–¨–¢–ê–¢ –ö–û–ù–°–£–õ–¨–¢–ê–¶–ò–ò**\n\n{analysis}",
                    parse_mode=ParseMode.MARKDOWN
                )
            
            # –ö–Ω–æ–ø–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            keyboard = [
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')],
                [InlineKeyboardButton("üìä –¢–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏", callback_data='test_samoocenka')]
            ]
            
            if update.callback_query:
                # –ö–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –Ω–∞–∂–∞—Ç–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await update.callback_query.message.reply_text(
                    "‚úÖ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                # –û–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - –∏—Å–ø–æ–ª—å–∑—É–µ–º reply_text
                await update.message.reply_text(
                    "‚úÖ **–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**\n\n–ß—Ç–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ?",
                    reply_markup=InlineKeyboardMarkup(keyboard),
                    parse_mode=ParseMode.MARKDOWN
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏: {e}")
            if update.callback_query:
                await update.callback_query.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
            else:
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        context.user_data.clear()
    
    async def _handle_consultation_answer(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å.")
            return 'STRUCTURED_CONSULTATION'
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–∞ (–Ω–µ –±–æ–ª–µ–µ 200 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) > 200:
            await update.message.reply_text(
                "–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ –≤ 1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
            )
            return 'STRUCTURED_CONSULTATION'
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
        answers = context.user_data.get('consultation_answers', [])
        answers.append(text)
        context.user_data['consultation_answers'] = answers
        
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
        current_q = context.user_data.get('current_question', 0)
        context.user_data['current_question'] = current_q + 1
        
        await self._ask_consultation_question(update, context)
        return 'STRUCTURED_CONSULTATION'
    
    def _is_direct_question(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        direct_question_indicators = [
            '—á—Ç–æ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç',
            '—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤',
            '–∫–∞–∫–∏–µ –∫—É—Ä—Å—ã',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ',
            '–æ–±—ä—è—Å–Ω–∏',
            '—á—Ç–æ —Ç–∞–∫–æ–µ',
            '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            '–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞',
            '–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å',
            '–≥–¥–µ –Ω–∞–π—Ç–∏',
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–∫–∞–∫ –Ω–∞—á–∞—Ç—å',
            '—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å',
            '—á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å',
            '–∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
            '–∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        for indicator in direct_question_indicators:
            if indicator in text_lower:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        if text.strip().endswith('?'):
            return True
        
        return False
    
    def _analyze_speech_patterns(self, text: str) -> Dict[str, bool]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ—á–∏"""
        text_lower = text.lower()
        
        patterns = {
            'psychology_need': False,
            'career_need': False,
            'emotional_support': False,
            'cancellation': False,
            'topic_change': False,
            'self_introduction_request': False,
            'dream_expression': False,
            'provocative': False
        }
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å
        psychology_keywords = [
            '—Å–æ–Ω', '—Å–Ω—ã', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–≥–∞', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—Ö', 
            '–≥—Ä—É—Å—Ç—å', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–¥–µ—Ç–∏', 
            '–ª—é–±–æ–≤—å', '—Ä–∞–∑–≤–æ–¥', '—Å–º–µ—Ä—Ç—å', '–ø–æ—Ç–µ—Ä—è', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '—Å—Ç—Ä–∞—à–Ω–æ'
        ]
        patterns['psychology_need'] = any(keyword in text_lower for keyword in psychology_keywords)
        
        # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        career_keywords = [
            '—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '—É—á–µ–±–∞', 
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏', '–æ–ø—ã—Ç', '–∫–æ–º–ø–∞–Ω–∏—è', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∫–æ–ª–ª–µ–≥–∏',
            '–≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è —Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'
        ]
        patterns['career_need'] = any(keyword in text_lower for keyword in career_keywords)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        emotional_keywords = [
            '–æ–¥–∏–Ω–æ–∫', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', 
            '–ø–æ–º–æ–≥–∏', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–Ω–∏–º–∞—é', '–ø–æ–Ω–∏–º–∞–µ—à—å'
        ]
        patterns['emotional_support'] = any(keyword in text_lower for keyword in emotional_keywords)
        
        # –û—Ç–º–µ–Ω–∞/–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ
        cancellation_keywords = [
            '–Ω–µ —Ö–æ—á—É', '—Ö–≤–∞—Ç–∏—Ç', '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '—Å—Ç–æ–ø', '–ø—Ä–µ–∫—Ä–∞—Ç–∏', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å', 
            '–Ω–µ –±—É–¥—É', '–Ω–µ –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å', '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å', '—Ö–≤–∞—Ç–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å'
        ]
        patterns['cancellation'] = any(keyword in text_lower for keyword in cancellation_keywords)
        
        # –°–º–µ–Ω–∞ —Ç–µ–º—ã
        topic_change_keywords = [
            '–¥—Ä—É–≥–æ–µ', '–¥—Ä—É–≥–∞—è —Ç–µ–º–∞', '–¥–∞–≤–∞–π –æ', '–ø–æ–≥–æ–≤–æ—Ä–∏–º –æ', '—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ', 
            '—Å–º–µ–Ω–∏ —Ç–µ–º—É', '–Ω–µ –æ–± —ç—Ç–æ–º'
        ]
        patterns['topic_change'] = any(keyword in text_lower for keyword in topic_change_keywords)
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ
        self_intro_keywords = [
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–±–µ', '–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', 
            '–∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å', '—Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è', '—Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å'
        ]
        patterns['self_introduction_request'] = any(keyword in text_lower for keyword in self_intro_keywords)
        
        # –ú–µ—á—Ç—ã –∏ —Ü–µ–ª–∏
        dream_keywords = [
            '—Ö–æ—á—É —Å—Ç–∞—Ç—å', '–º–µ—á—Ç–∞—é', '–º–µ—á—Ç–∞', '—Ü–µ–ª—å', '–ø–ª–∞–Ω–∏—Ä—É—é', '–±—É–¥—É', '—Å—Ç–∞–Ω—É'
        ]
        patterns['dream_expression'] = any(keyword in text_lower for keyword in dream_keywords)
        
        # –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        provocative_keywords = [
            '–≥–ª—É–ø—ã–π', '—Ç—É–ø–æ–π', '–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π', '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å', '–Ω–µ —Å–ª—É—à–∞–µ—à—å', 
            '–ø–ª–æ—Ö–æ–π', '—É–∂–∞—Å–Ω—ã–π', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–Ω–µ–Ω–∞–≤–∏–¥–∏—à—å', '–Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ –ø–æ–Ω—è–ª–∞'
        ]
        patterns['provocative'] = any(keyword in text_lower for keyword in provocative_keywords)
        
        return patterns
    
    def _determine_response_type(self, patterns: Dict[str, bool], text: str) -> PromptType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
        
        if patterns['psychology_need'] or patterns['emotional_support']:
            return PromptType.PSYCHOLOGY_CONSULTATION
        elif patterns['career_need']:
            return PromptType.CAREER_CONSULTATION
        elif '—Ç–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏' in text.lower() or '–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ' in text.lower():
            return PromptType.SELF_ESTEEM_ANALYSIS
        elif '–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower() or '–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower():
            return PromptType.FULL_ANALYSIS
        else:
            return PromptType.EXPRESS_ANALYSIS
    
    async def _get_ai_response(self, user_id: int, message: str, response_type: PromptType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        conversation_context = self.conversation_history.get(user_id, [])
        context = {
            'conversation': '\n'.join(conversation_context[-5:]),  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏
            'user_message': message,
            'message_count': len(conversation_context)
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò (–∏—Å–ø–æ–ª—å–∑—É–µ–º GPT-3.5 –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ)
        ai_response = await self.ai_client.get_direct_response(
            prompt=f"""–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥, —Ä–∞–±–æ—Ç–∞—é—â–∏–π –ø–æ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º –∫–Ω–∏–≥–∏ "–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ".

–¢–í–û–ô –ü–û–î–•–û–î:

üåü **–î–£–•–û–í–ù–´–ï –ü–†–ò–ù–¶–ò–ü–´:**
- "–î–ª—è –º–µ–Ω—è —Å–æ–∑–¥–∞–Ω –º–∏—Ä" ‚Äî –∫–∞–∂–¥—ã–π —á–µ–ª–æ–≤–µ–∫ —É–Ω–∏–∫–∞–ª—å–Ω–æ —Ü–µ–Ω–µ–Ω
- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ —Å–∏–ª—ã ‚Äî –∫–æ—Ä–µ–Ω—å –≤—Å–µ—Ö –≤–Ω–µ—à–Ω–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π
- –°–∞–º–æ—É–≤–∞–∂–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –æ—Å–æ–∑–Ω–∞–Ω–∏–µ —Å–≤–æ–µ–π –∏—Å—Ç–∏–Ω–Ω–æ–π —Ü–µ–Ω–Ω–æ—Å—Ç–∏
- –£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∏ —Å–∏–ª—ã –¥–ª—è –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
- –í–µ—Ä–∞ –≤ —Å–µ–±—è —Å–≤—è–∑–∞–Ω–∞ —Å –≤–µ—Ä–æ–π –≤ –≤—ã—Å—à–µ–µ

üîÑ **–ú–ï–¢–û–î–´:**
1. –î–∏–∞–ª–æ–≥ —Å –¥—É—à–æ–π ‚Äî —Ä–∞–∑–≥–æ–≤–æ—Ä —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º –≥–æ–ª–æ—Å–æ–º
2. –ü–æ–≤—Ç–æ—Ä–µ–Ω–∏–µ ‚Äî —É–∫–æ—Ä–µ–Ω–µ–Ω–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã—Ö —É–±–µ–∂–¥–µ–Ω–∏–π
3. –°–∞–º–æ–∞–Ω–∞–ª–∏–∑ ‚Äî –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ –∑–∞ —Ä–µ–∞–∫—Ü–∏—è–º–∏
4. –†–∞–±–æ—Ç–∞ —Å —ç–º–æ—Ü–∏—è–º–∏ ‚Äî –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –∏ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è —á—É–≤—Å—Ç–≤

–ó–ê–î–ê–ß–ê: –ü–æ–º–æ–≥–∏ —á–µ–ª–æ–≤–µ–∫—É –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –ø–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É, –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ.

–ö–û–ù–¢–ï–ö–°–¢: {context.get('conversation', '')}
–í–û–ü–†–û–°: {message}

–û–¢–í–ï–¢ (400-500 —Å–ª–æ–≤):
üíô –≠–º–ø–∞—Ç–∏—è –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
üß† –ê–Ω–∞–ª–∏–∑ —Å–∏—Ç—É–∞—Ü–∏–∏
üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑ –∫–Ω–∏–≥–∏
üéØ –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

–°–¢–ò–õ–¨: –≠–º–ø–∞—Ç–∏—á–Ω—ã–π, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π, –º—É–¥—Ä—ã–π.""",
            user_id=user_id
        )
        
        return ai_response
    
    async def _send_response(self, update: Update, response: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000
            if len(response) <= max_length:
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
                for i, part in enumerate(parts):
                    prefix = f"**–û—Ç–≤–µ—Ç (—á–∞—Å—Ç—å {i+1}/{len(parts)}):**\n\n" if i > 0 else ""
                    await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            try:
                await update.message.reply_text(response)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                await update.message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _suggest_next_steps(self, update: Update, patterns: Dict[str, bool], message_count: int):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        
        if message_count >= 10 and not patterns['cancellation']:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "üíé **–•–æ—Ç–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?**\n\n"
                "–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ HR-–æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
                "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '—Ö–æ—á—É –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'"
            )
    
    async def _handle_cancellation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        await update.message.reply_text(
            "–ü–æ–Ω—è–ª. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ. "
            "–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíô"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        self.ai_client.clear_user_data(user.id)
        self.conversation_history.pop(user.id, None)
        self.free_consultation_tracker.pop(user.id, None)
        
        return 'END'
    
    async def _handle_topic_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? "
            "–Ø –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. üòä"
        )
        return 'WAITING_MESSAGE'
    
    async def _handle_self_introduction(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"""
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–Ω–∏–≥–µ \"–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ\". "
            "–ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –ø–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É, –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. "
            "–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–∑ –∫–Ω–∏–≥–∏ \"–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ\" –∏ –º–µ—Ç–æ–¥—ã –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞. "
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç! üìñ"
        )
        return 'WAITING_MESSAGE'
    