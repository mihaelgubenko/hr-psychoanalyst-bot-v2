"""
–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º —Ç–æ–∫–µ–Ω–∞–º–∏
"""

import logging
from typing import Dict, Any, Optional
from telegram import Update
from telegram.ext import ContextTypes
from telegram.constants import ParseMode

from ai.adaptive_prompt_manager import PromptType

logger = logging.getLogger(__name__)

class BotConversationHandler:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–æ–≤ —Å —É–º–Ω—ã–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
    
    def __init__(self, ai_client, database):
        self.ai_client = ai_client
        self.database = database
        self.conversation_history = {}  # user_id -> list of messages
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user = update.effective_user
        text = update.message.text.strip()
        
        if not text:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ —á—Ç–æ-—Ç–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ.")
            return 'WAITING_MESSAGE'
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user.id not in self.conversation_history:
            self.conversation_history[user.id] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
        self.conversation_history[user.id].append(text)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏
        if len(self.conversation_history[user.id]) > 20:
            self.conversation_history[user.id] = self.conversation_history[user.id][-20:]
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Ä–µ—á–∏
        patterns = self._analyze_speech_patterns(text)
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–ª—É—á–∞–∏
        if patterns['cancellation']:
            return await self._handle_cancellation(update, context)
        
        if patterns['topic_change']:
            return await self._handle_topic_change(update, context)
        
        if patterns['self_introduction_request']:
            return await self._handle_self_introduction(update, context)
        
        # –ü–†–ò–û–†–ò–¢–ï–¢: –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–¥–∞–µ—Ç –ø—Ä—è–º–æ–π –≤–æ–ø—Ä–æ—Å - –æ—Ç–≤–µ—á–∞–µ–º —Å—Ä–∞–∑—É
        if self._is_direct_question(text):
            response_type = self._determine_response_type(patterns, text)
            try:
                response = await self._get_ai_response(user.id, text, response_type)
                await self._send_response(update, response)
                return 'WAITING_MESSAGE'
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
                await update.message.reply_text(
                    "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                )
                return 'WAITING_MESSAGE'
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ—Ç–≤–µ—Ç–∞
        response_type = self._determine_response_type(patterns, text)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –¥—É–º–∞–µ—Ç
            thinking_msg = await update.message.reply_text("ü§î –î—É–º–∞—é...")
            await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
            
            response = await self._get_ai_response(user.id, text, response_type)
            
            # –£–¥–∞–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä
            await thinking_msg.delete()
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await self._send_response(update, response)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–º–µ–Ω—ã –ø–æ–¥ –æ—Ç–≤–µ—Ç–æ–º
            from telegram import InlineKeyboardButton, InlineKeyboardMarkup
            
            cancel_keyboard = [
                [InlineKeyboardButton("‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç—å –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é", callback_data='end_consultation')],
                [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
            ]
            
            await update.message.reply_text(
                "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                reply_markup=InlineKeyboardMarkup(cancel_keyboard)
            )
            
            # FOLLOW-UP –†–ï–ñ–ò–ú: –£–º–µ–Ω—å—à–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
            if context.user_data.get('followup_mode'):
                free_q = context.user_data.get('free_questions', 0)
                if free_q > 0:
                    free_q -= 1
                    context.user_data['free_questions'] = free_q
                    
                    if free_q > 0:
                        await update.message.reply_text(
                            f"üí° –û—Å—Ç–∞–ª–æ—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤: **{free_q}/10**",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    else:
                        # –ó–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã
                        from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                        
                        keyboard = [
                            [InlineKeyboardButton("üë§ –õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data='personal')],
                            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='main_menu')]
                        ]
                        
                        await update.message.reply_text(
                            "‚ö†Ô∏è **–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å (10/10)**\n\n"
                            "–•–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–ª—É–±–æ–∫—É—é —Ä–∞–±–æ—Ç—É?\n\n"
                            "üíé **–õ–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è:**\n"
                            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
                            "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–ª–∞–Ω\n"
                            "‚Ä¢ –ì–ª—É–±–æ–∫–∏–π —Ä–∞–∑–±–æ—Ä\n\n"
                            "–û—Ç 2000‚ÇΩ",
                            reply_markup=InlineKeyboardMarkup(keyboard),
                            parse_mode=ParseMode.MARKDOWN
                        )
                        context.user_data.pop('followup_mode', None)
                else:
                    # –£–∂–µ 0 –≤–æ–ø—Ä–æ—Å–æ–≤
                    from telegram import InlineKeyboardButton, InlineKeyboardMarkup
                    
                    keyboard = [
                        [InlineKeyboardButton("üë§ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è", callback_data='personal')],
                        [InlineKeyboardButton("üè† –ú–µ–Ω—é", callback_data='main_menu')]
                    ]
                    
                    await update.message.reply_text(
                        "‚ö†Ô∏è –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.\n\n"
                        "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω—É–∂–Ω–∞ –ª–∏—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è.",
                        reply_markup=InlineKeyboardMarkup(keyboard)
                    )
                    return 'WAITING_MESSAGE'
            else:
                # –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏
                await self._suggest_next_steps(update, patterns, len(self.conversation_history[user.id]))
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –ò–ò: {e}")
            await update.message.reply_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )
        
        return 'WAITING_MESSAGE'
    
    def _is_direct_question(self, text: str) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, —Ç—Ä–µ–±—É—é—â–∏—Ö –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞"""
        text_lower = text.lower()
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        direct_question_indicators = [
            '—á—Ç–æ –∏–∑ —Å–µ–±—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç',
            '—á—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤',
            '–∫–∞–∫–∏–µ –∫—É—Ä—Å—ã',
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ',
            '–æ–±—ä—è—Å–Ω–∏',
            '—á—Ç–æ —Ç–∞–∫–æ–µ',
            '–∫–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç',
            '–≤ —á–µ–º —Ä–∞–∑–Ω–∏—Ü–∞',
            '–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å',
            '–≥–¥–µ –Ω–∞–π—Ç–∏',
            '—Å–∫–æ–ª—å–∫–æ —Å—Ç–æ–∏—Ç',
            '–∫–∞–∫ –Ω–∞—á–∞—Ç—å',
            '—Å —á–µ–≥–æ –Ω–∞—á–∞—Ç—å',
            '—á—Ç–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å',
            '–∫–∞–∫–∏–µ –Ω–∞–≤—ã–∫–∏',
            '–∫–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è'
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä—è–º—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        for indicator in direct_question_indicators:
            if indicator in text_lower:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–ø—Ä–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –∑–Ω–∞–∫–∏ –≤ –∫–æ–Ω—Ü–µ
        if text.strip().endswith('?'):
            return True
        
        return False
    
    def _analyze_speech_patterns(self, text: str) -> Dict[str, bool]:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ —Ä–µ—á–∏"""
        text_lower = text.lower()
        
        patterns = {
            'psychology_need': False,
            'career_need': False,
            'emotional_support': False,
            'cancellation': False,
            'topic_change': False,
            'self_introduction_request': False,
            'dream_expression': False,
            'provocative': False
        }
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–º–æ—â—å
        psychology_keywords = [
            '—Å–æ–Ω', '—Å–Ω—ã', '–¥–µ–ø—Ä–µ—Å—Å–∏—è', '—Ç—Ä–µ–≤–æ–≥–∞', '—Å—Ç—Ä–µ—Å—Å', '–ø–∞–Ω–∏–∫–∞', '—Å—Ç—Ä–∞—Ö', 
            '–≥—Ä—É—Å—Ç—å', '–æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–æ', '–æ—Ç–Ω–æ—à–µ–Ω–∏—è', '—Å–µ–º—å—è', '—Ä–æ–¥–∏—Ç–µ–ª–∏', '–¥–µ—Ç–∏', 
            '–ª—é–±–æ–≤—å', '—Ä–∞–∑–≤–æ–¥', '—Å–º–µ—Ä—Ç—å', '–ø–æ—Ç–µ—Ä—è', '–ø–ª–æ—Ö–æ', '–±–æ–ª—å–Ω–æ', '—Å—Ç—Ä–∞—à–Ω–æ'
        ]
        patterns['psychology_need'] = any(keyword in text_lower for keyword in psychology_keywords)
        
        # –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        career_keywords = [
            '—Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–∞', '–ø—Ä–æ—Ñ–µ—Å—Å–∏—è', '–∑–∞—Ä–ø–ª–∞—Ç–∞', '–¥–µ–Ω—å–≥–∏', '—É—á–µ–±–∞', 
            '–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ', '–Ω–∞–≤—ã–∫–∏', '–æ–ø—ã—Ç', '–∫–æ–º–ø–∞–Ω–∏—è', '–Ω–∞—á–∞–ª—å–Ω–∏–∫', '–∫–æ–ª–ª–µ–≥–∏',
            '–≤—ã—Å–æ–∫–æ–æ–ø–ª–∞—á–∏–≤–∞–µ–º–∞—è —Ä–∞–±–æ—Ç–∞', '–∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç', '–ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ'
        ]
        patterns['career_need'] = any(keyword in text_lower for keyword in career_keywords)
        
        # –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞
        emotional_keywords = [
            '–æ–¥–∏–Ω–æ–∫', '–≥—Ä—É—Å—Ç–Ω–æ', '–ø–ª–æ—Ö–æ', '—É—Å—Ç–∞–ª', '—É—Å—Ç–∞–ª–∞', '—Å–ª–æ–∂–Ω–æ', '—Ç—Ä—É–¥–Ω–æ', 
            '–ø–æ–º–æ–≥–∏', '–ø–æ–¥–¥–µ—Ä–∂–∫–∞', '–ø–æ–Ω–∏–º–∞—é', '–ø–æ–Ω–∏–º–∞–µ—à—å'
        ]
        patterns['emotional_support'] = any(keyword in text_lower for keyword in emotional_keywords)
        
        # –û—Ç–º–µ–Ω–∞/–ø—Ä–µ–∫—Ä–∞—â–µ–Ω–∏–µ
        cancellation_keywords = [
            '–Ω–µ —Ö–æ—á—É', '—Ö–≤–∞—Ç–∏—Ç', '–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ', '—Å—Ç–æ–ø', '–ø—Ä–µ–∫—Ä–∞—Ç–∏', '–æ—Å—Ç–∞–Ω–æ–≤–∏—Å—å', 
            '–Ω–µ –±—É–¥—É', '–Ω–µ –±—É–¥—É –≥–æ–≤–æ—Ä–∏—Ç—å', '–Ω–µ —Ö–æ—á—É –≥–æ–≤–æ—Ä–∏—Ç—å', '—Ö–≤–∞—Ç–∏—Ç –≥–æ–≤–æ—Ä–∏—Ç—å'
        ]
        patterns['cancellation'] = any(keyword in text_lower for keyword in cancellation_keywords)
        
        # –°–º–µ–Ω–∞ —Ç–µ–º—ã
        topic_change_keywords = [
            '–¥—Ä—É–≥–æ–µ', '–¥—Ä—É–≥–∞—è —Ç–µ–º–∞', '–¥–∞–≤–∞–π –æ', '–ø–æ–≥–æ–≤–æ—Ä–∏–º –æ', '—Ö–æ—á—É –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å –æ', 
            '—Å–º–µ–Ω–∏ —Ç–µ–º—É', '–Ω–µ –æ–± —ç—Ç–æ–º'
        ]
        patterns['topic_change'] = any(keyword in text_lower for keyword in topic_change_keywords)
        
        # –ó–∞–ø—Ä–æ—Å —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ
        self_intro_keywords = [
            '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ', '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Ç–µ–±–µ', '–∫—Ç–æ —Ç—ã', '—á—Ç–æ —Ç—ã', 
            '–∫–∞–∫ —Ç—ã —Ä–∞–±–æ—Ç–∞–µ—à—å', '—Ç–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è', '—Ç–≤–æ—è —Ä–∞–±–æ—Ç–∞', '—á—Ç–æ —Ç—ã —É–º–µ–µ—à—å'
        ]
        patterns['self_introduction_request'] = any(keyword in text_lower for keyword in self_intro_keywords)
        
        # –ú–µ—á—Ç—ã –∏ —Ü–µ–ª–∏
        dream_keywords = [
            '—Ö–æ—á—É —Å—Ç–∞—Ç—å', '–º–µ—á—Ç–∞—é', '–º–µ—á—Ç–∞', '—Ü–µ–ª—å', '–ø–ª–∞–Ω–∏—Ä—É—é', '–±—É–¥—É', '—Å—Ç–∞–Ω—É'
        ]
        patterns['dream_expression'] = any(keyword in text_lower for keyword in dream_keywords)
        
        # –ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
        provocative_keywords = [
            '–≥–ª—É–ø—ã–π', '—Ç—É–ø–æ–π', '–±–µ—Å–ø–æ–ª–µ–∑–Ω—ã–π', '–Ω–µ –ø–æ–Ω–∏–º–∞–µ—à—å', '–Ω–µ —Å–ª—É—à–∞–µ—à—å', 
            '–ø–ª–æ—Ö–æ–π', '—É–∂–∞—Å–Ω—ã–π', '–Ω–µ–Ω–∞–≤–∏–∂—É', '–Ω–µ–Ω–∞–≤–∏–¥–∏—à—å', '–Ω–µ –ø–æ–Ω—è–ª', '–Ω–µ –ø–æ–Ω—è–ª–∞'
        ]
        patterns['provocative'] = any(keyword in text_lower for keyword in provocative_keywords)
        
        return patterns
    
    def _determine_response_type(self, patterns: Dict[str, bool], text: str) -> PromptType:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–∏–ø–∞ –æ—Ç–≤–µ—Ç–∞"""
        
        if patterns['psychology_need'] or patterns['emotional_support']:
            return PromptType.PSYCHOLOGY_CONSULTATION
        elif patterns['career_need']:
            return PromptType.CAREER_CONSULTATION
        elif '—Ç–µ—Å—Ç —Å–∞–º–æ–æ—Ü–µ–Ω–∫–∏' in text.lower() or '–≤–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ' in text.lower():
            return PromptType.SELF_ESTEEM_ANALYSIS
        elif '–ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower() or '–¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑' in text.lower():
            return PromptType.FULL_ANALYSIS
        else:
            return PromptType.EXPRESS_ANALYSIS
    
    async def _get_ai_response(self, user_id: int, message: str, response_type: PromptType) -> str:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –ò–ò"""
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        conversation_context = self.conversation_history.get(user_id, [])
        context = {
            'conversation': '\n'.join(conversation_context),
            'user_message': message,
            'message_count': len(conversation_context)
        }
        
        # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –ò–ò
        ai_response = await self.ai_client.get_response(
            prompt=message,
            user_id=user_id,
            prompt_type=response_type,
            context=context
        )
        
        return ai_response.content
    
    async def _send_response(self, update: Update, response: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏
            max_length = 4000
            if len(response) <= max_length:
                await update.message.reply_text(response, parse_mode=ParseMode.MARKDOWN)
            else:
                parts = [response[i:i+max_length] for i in range(0, len(response), max_length)]
                for i, part in enumerate(parts):
                    prefix = f"**–û—Ç–≤–µ—Ç (—á–∞—Å—Ç—å {i+1}/{len(parts)}):**\n\n" if i > 0 else ""
                    await update.message.reply_text(prefix + part, parse_mode=ParseMode.MARKDOWN)
        except Exception as e:
            # –ï—Å–ª–∏ Markdown –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å Markdown: {e}")
            try:
                await update.message.reply_text(response)
            except Exception as e2:
                logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e2}")
                await update.message.reply_text("üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
    
    async def _suggest_next_steps(self, update: Update, patterns: Dict[str, bool], message_count: int):
        """–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Å–ª–µ–¥—É—é—â–∏—Ö —à–∞–≥–æ–≤"""
        
        if message_count >= 10 and not patterns['cancellation']:
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑
            await update.message.reply_text(
                "üíé **–•–æ—Ç–∏—Ç–µ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑?**\n\n"
                "–ü–æ–ª–Ω—ã–π –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ –≤–∫–ª—é—á–∞–µ—Ç:\n"
                "‚Ä¢ 7 –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤\n"
                "‚Ä¢ –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ª–∏—á–Ω–æ—Å—Ç–∏\n"
                "‚Ä¢ HR-–æ—Ü–µ–Ω–∫–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏\n"
                "‚Ä¢ –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—É—é —Ç—Ä–∞–µ–∫—Ç–æ—Ä–∏—é\n\n"
                "–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚ÇΩ\n"
                "–î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–ø–∏—à–∏—Ç–µ: '—Ö–æ—á—É –ø–æ–ª–Ω—ã–π –∞–Ω–∞–ª–∏–∑'"
            )
    
    async def _handle_cancellation(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã"""
        await update.message.reply_text(
            "–ü–æ–Ω—è–ª. –ï—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ. "
            "–Ø –≤—Å–µ–≥–¥–∞ –≥–æ—Ç–æ–≤ –≤—ã—Å–ª—É—à–∞—Ç—å –∏ –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å. üíô"
        )
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = update.effective_user
        self.ai_client.clear_user_data(user.id)
        self.conversation_history.pop(user.id, None)
        
        return 'END'
    
    async def _handle_topic_change(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã —Ç–µ–º—ã"""
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –û —á–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å? "
            "–Ø –≥–æ—Ç–æ–≤ –æ–±—Å—É–¥–∏—Ç—å –ª—é–±—É—é —Ç–µ–º—É, –∫–æ—Ç–æ—Ä–∞—è –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç. üòä"
        )
        return 'WAITING_MESSAGE'
    
    async def _handle_self_introduction(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> str:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –æ —Å–µ–±–µ"""
        await update.message.reply_text(
            "–ö–æ–Ω–µ—á–Ω–æ! –Ø –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∫–Ω–∏–≥–µ \"–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ\". "
            "–ü–æ–º–æ–≥–∞—é –ª—é–¥—è–º –ø–æ–Ω—è—Ç—å —Å–µ–±—è, –ø–æ–≤—ã—Å–∏—Ç—å —Å–∞–º–æ–æ—Ü–µ–Ω–∫—É, –Ω–∞–π—Ç–∏ –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ. "
            "–ò—Å–ø–æ–ª—å–∑—É—é –ø—Ä–∏–Ω—Ü–∏–ø—ã –∏–∑ –∫–Ω–∏–≥–∏ \"–í–æ—Å—Ö–æ–∂–¥–µ–Ω–∏–µ\" –∏ –º–µ—Ç–æ–¥—ã –ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑–∞. "
            "–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –±–µ—Å–ø–æ–∫–æ–∏—Ç! üìñ"
        )
        return 'WAITING_MESSAGE'
    