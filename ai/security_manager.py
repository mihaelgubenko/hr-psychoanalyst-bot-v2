"""
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
SECURITY MANAGER - –ë–ê–ó–û–í–ê–Ø –ó–ê–©–ò–¢–ê –ë–û–¢–ê
‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

–ë–∞–∑–æ–≤–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç –∞—Ç–∞–∫:
- Rate limiting (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤)
- –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞—Å—Ö–æ–¥–æ–≤ —Ç–æ–∫–µ–Ω–æ–≤
- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
- –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

üìÖ –°–û–ó–î–ê–ù–û: 2025-10-17
üéØ –¶–ï–õ–¨: –ó–∞—â–∏—Ç–∞ –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —É–≥—Ä–æ–∑ –±–µ–∑ –Ω–∞—Ä—É—à–µ–Ω–∏—è –ª–æ–≥–∏–∫–∏
"""

import logging
import time
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from collections import defaultdict, deque

logger = logging.getLogger(__name__)

@dataclass
class SecurityAlert:
    """–ê–ª–µ—Ä—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    user_id: int
    alert_type: str
    description: str
    timestamp: float
    severity: str  # 'low', 'medium', 'high'

@dataclass
class RateLimit:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting"""
    max_requests: int = 10  # –ú–∞–∫—Å–∏–º—É–º –∑–∞–ø—Ä–æ—Å–æ–≤
    time_window: int = 60   # –í —Å–µ–∫—É–Ω–¥–∞—Ö (1 –º–∏–Ω—É—Ç–∞)
    max_tokens_per_hour: int = 5000  # –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞—Å –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

class SecurityManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
    
    def __init__(self):
        self.user_requests = defaultdict(lambda: deque())  # user_id -> deque of timestamps
        self.user_tokens = defaultdict(int)  # user_id -> total tokens today
        self.blocked_users = set()  # –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        self.security_alerts = []  # –ò—Å—Ç–æ—Ä–∏—è –∞–ª–µ—Ä—Ç–æ–≤
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞—â–∏—Ç—ã
        self.rate_limit = RateLimit()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total_requests = 0
        self.blocked_requests = 0
        self.security_incidents = 0
    
    def check_rate_limit(self, user_id: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limiting –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (is_allowed, reason)
        """
        current_time = time.time()
        
        # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        user_queue = self.user_requests[user_id]
        while user_queue and user_queue[0] < current_time - self.rate_limit.time_window:
            user_queue.popleft()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç
        if len(user_queue) >= self.rate_limit.max_requests:
            self._log_security_alert(
                user_id, 
                'rate_limit_exceeded', 
                f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤: {len(user_queue)}/{self.rate_limit.max_requests}',
                'medium'
            )
            self.blocked_requests += 1
            return False, f"–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ {self.rate_limit.time_window} —Å–µ–∫—É–Ω–¥."
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
        user_queue.append(current_time)
        self.total_requests += 1
        
        return True, "OK"
    
    def check_token_limit(self, user_id: int, tokens_used: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ —Ç–æ–∫–µ–Ω–æ–≤ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (is_allowed, reason)
        """
        current_hour = int(time.time() // 3600)
        hour_key = f"{user_id}_{current_hour}"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∑–∞ —Ç–µ–∫—É—â–∏–π —á–∞—Å
        user_tokens_this_hour = self.user_tokens.get(hour_key, 0)
        
        if user_tokens_this_hour + tokens_used > self.rate_limit.max_tokens_per_hour:
            self._log_security_alert(
                user_id,
                'token_limit_exceeded',
                f'–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤: {user_tokens_this_hour + tokens_used}/{self.rate_limit.max_tokens_per_hour}',
                'high'
            )
            return False, f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
        self.user_tokens[hour_key] = user_tokens_this_hour + tokens_used
        
        return True, "OK"
    
    def check_spam_patterns(self, user_id: int, message: str) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º-–ø–∞—Ç—Ç–µ—Ä–Ω—ã
        
        Returns:
            (is_spam, reason)
        """
        message_lower = message.lower().strip()
        
        # –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
        spam_patterns = [
            '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–¥–µ–Ω—å–≥–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞',
            'bitcoin', 'ethereum', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–±—Ä–æ–∫–µ—Ä', '–∫–∞–∑–∏–Ω–æ',
            'xxx', '–ø–æ—Ä–Ω–æ', '—Å–µ–∫—Å', '–∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞', '–∏–Ω—Ç–∏–º'
        ]
        
        for pattern in spam_patterns:
            if pattern in message_lower:
                self._log_security_alert(
                    user_id,
                    'spam_detected',
                    f'–û–±–Ω–∞—Ä—É–∂–µ–Ω —Å–ø–∞–º: "{pattern}" –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏',
                    'medium'
                )
                return True, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç."
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–æ–æ–±—â–µ–Ω–∏—è
        if len(message_lower) < 3:
            return True, "–°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–æ–µ."
        
        return False, "OK"
    
    def check_user_behavior(self, user_id: int) -> Tuple[bool, str]:
        """
        –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
        Returns:
            (is_suspicious, reason)
        """
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        if user_id in self.blocked_users:
            return False, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω."
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–µ—Ä—Ç–æ–≤ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_alerts = [alert for alert in self.security_alerts if alert.user_id == user_id]
        recent_alerts = [alert for alert in user_alerts if alert.timestamp > time.time() - 3600]  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å
        
        if len(recent_alerts) >= 3:
            self._log_security_alert(
                user_id,
                'suspicious_behavior',
                f'–ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–∞—Ä—É—à–µ–Ω–∏—è: {len(recent_alerts)} –∞–ª–µ—Ä—Ç–æ–≤ –∑–∞ —á–∞—Å',
                'high'
            )
            return False, "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ. –î–æ—Å—Ç—É–ø –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω."
        
        return True, "OK"
    
    def _log_security_alert(self, user_id: int, alert_type: str, description: str, severity: str):
        """–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–ª–µ—Ä—Ç–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        alert = SecurityAlert(
            user_id=user_id,
            alert_type=alert_type,
            description=description,
            timestamp=time.time(),
            severity=severity
        )
        
        self.security_alerts.append(alert)
        self.security_incidents += 1
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞–ª–µ—Ä—Ç–æ–≤
        if len(self.security_alerts) > 1000:
            self.security_alerts = self.security_alerts[-500:]
        
        logger.warning(f"SECURITY ALERT [{severity.upper()}]: User {user_id} - {alert_type}: {description}")
    
    def block_user(self, user_id: int, reason: str):
        """–ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.blocked_users.add(user_id)
        self._log_security_alert(user_id, 'user_blocked', reason, 'high')
        logger.warning(f"USER BLOCKED: {user_id} - {reason}")
    
    def unblock_user(self, user_id: int):
        """–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        self.blocked_users.discard(user_id)
        logger.info(f"USER UNBLOCKED: {user_id}")
    
    def get_security_stats(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        return {
            'total_requests': self.total_requests,
            'blocked_requests': self.blocked_requests,
            'security_incidents': self.security_incidents,
            'blocked_users_count': len(self.blocked_users),
            'recent_alerts': len([a for a in self.security_alerts if a.timestamp > time.time() - 3600])
        }
    
    def get_user_stats(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_requests_count = len(self.user_requests[user_id])
        user_alerts = [alert for alert in self.security_alerts if alert.user_id == user_id]
        
        return {
            'requests_last_minute': user_requests_count,
            'total_alerts': len(user_alerts),
            'is_blocked': user_id in self.blocked_users,
            'tokens_today': sum(v for k, v in self.user_tokens.items() if k.startswith(f"{user_id}_"))
        }
