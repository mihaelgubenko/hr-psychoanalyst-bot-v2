"""
–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –ò–ò
"""

import logging
from typing import Dict, List, Optional, Tuple
from dataclasses import dataclass
from enum import Enum

logger = logging.getLogger(__name__)

class PromptType(Enum):
    """–¢–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤"""
    EXPRESS_ANALYSIS = "express_analysis"
    FULL_ANALYSIS = "full_analysis"
    PSYCHOLOGY_CONSULTATION = "psychology_consultation"
    CAREER_CONSULTATION = "career_consultation"
    EMOTIONAL_SUPPORT = "emotional_support"
    SELF_ESTEEM_ANALYSIS = "self_esteem_analysis"

class PromptLength(Enum):
    """–î–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–æ–≤"""
    SHORT = "short"      # ~200 —Ç–æ–∫–µ–Ω–æ–≤
    MEDIUM = "medium"    # ~400 —Ç–æ–∫–µ–Ω–æ–≤
    LONG = "long"        # ~600 —Ç–æ–∫–µ–Ω–æ–≤
    EXTENDED = "extended" # ~800 —Ç–æ–∫–µ–Ω–æ–≤

@dataclass
class PromptTemplate:
    """–®–∞–±–ª–æ–Ω –ø—Ä–æ–º–ø—Ç–∞"""
    id: str
    type: PromptType
    length: PromptLength
    template: str
    description: str
    estimated_tokens: int
    active: bool = True

class AdaptivePromptManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–º–ø—Ç–æ–≤"""
    
    def __init__(self, config):
        self.config = config
        self.templates = self._load_default_templates()
        self.user_preferences = {}  # –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    def _load_default_templates(self) -> Dict[str, PromptTemplate]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –ø—Ä–æ–º–ø—Ç–æ–≤"""
        templates = {}
        
        # –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ - –∫–æ—Ä–æ—Ç–∫–∏–π
        templates["express_analysis_short"] = PromptTemplate(
            id="express_analysis_short",
            type=PromptType.EXPRESS_ANALYSIS,
            length=PromptLength.SHORT,
            template="""–¢—ã ‚Äî HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫. –ü—Ä–æ–≤–µ–¥–∏ –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.

–î–ò–ê–õ–û–ì: {conversation}

–§–û–†–ú–ê–¢:
üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [–∫—Ä–∞—Ç–∫–æ]
üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [2-3 –æ–±–ª–∞—Å—Ç–∏]
üéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –¥–æ 150 —Å–ª–æ–≤.""",
            description="–ö—Ä–∞—Ç–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
            estimated_tokens=200
        )
        
        # –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ - —Å—Ä–µ–¥–Ω–∏–π
        templates["express_analysis_medium"] = PromptTemplate(
            id="express_analysis_medium",
            type=PromptType.EXPRESS_ANALYSIS,
            length=PromptLength.MEDIUM,
            template="""–¢—ã ‚Äî –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ –∏ –∫–∞—Ä—å–µ—Ä–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç.

–î–ò–ê–õ–û–ì –ö–õ–ò–ï–ù–¢–ê ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π):
{conversation}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
- –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (–§—Ä–µ–π–¥): –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (–Æ–Ω–≥): –∞—Ä—Ö–µ—Ç–∏–ø—ã
- MBTI: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
- Big Five: –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –≠–ö–°–ü–†–ï–°–°-–ü–†–û–§–ò–õ–¨

üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [–∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ]
üìä –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: [2-3 —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏]
üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [3-4 –æ–±–ª–∞—Å—Ç–∏]
üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è]
‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è: [—á—Ç–æ —Ä–∞–∑–≤–∏–≤–∞—Ç—å]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π. –î–æ 300 —Å–ª–æ–≤.""",
            description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
            estimated_tokens=400
        )
        
        # –≠–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ - –¥–ª–∏–Ω–Ω—ã–π
        templates["express_analysis_long"] = PromptTemplate(
            id="express_analysis_long",
            type=PromptType.EXPRESS_ANALYSIS,
            length=PromptLength.LONG,
            template="""–¢—ã ‚Äî –≤–µ–¥—É—â–∏–π HR-–ø—Å–∏—Ö–æ–∞–Ω–∞–ª–∏—Ç–∏–∫ —Å 20-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–î–ï–¢–ê–õ–¨–ù–´–ô –î–ò–ê–õ–û–ì –ö–õ–ò–ï–ù–¢–ê ({message_count} —Å–æ–æ–±—â–µ–Ω–∏–π):
{conversation}

–ö–û–ù–¢–ï–ö–°–¢: {context_summary}

–ó–ê–î–ê–ß–ê: –ü—Ä–æ–≤–µ–¥–∏ –≥–ª—É–±–æ–∫–∏–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑ –ª–∏—á–Ω–æ—Å—Ç–∏.

–ú–ï–¢–û–î–û–õ–û–ì–ò–Ø:
- –ü—Å–∏—Ö–æ–∞–Ω–∞–ª–∏–∑ (–§—Ä–µ–π–¥): –∑–∞—â–∏—Ç–Ω—ã–µ –º–µ—Ö–∞–Ω–∏–∑–º—ã, –±–µ—Å—Å–æ–∑–Ω–∞—Ç–µ–ª—å–Ω—ã–µ –º–æ—Ç–∏–≤—ã
- –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è (–Æ–Ω–≥): –∞—Ä—Ö–µ—Ç–∏–ø—ã, —Ç–∏–ø—ã –ª–∏—á–Ω–æ—Å—Ç–∏
- MBTI: –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –≤ –≤–æ—Å–ø—Ä–∏—è—Ç–∏–∏ –∏ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π
- Big Five: –æ—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã –ª–∏—á–Ω–æ—Å—Ç–∏
- –ê–Ω–∞–ª–∏–∑ —Ä–µ—á–µ–≤—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üéØ –î–ï–¢–ê–õ–¨–ù–´–ô –≠–ö–°–ü–†–ï–°–°-–ü–†–û–§–ò–õ–¨

üß† –ü—Å–∏—Ö–æ—Ç–∏–ø: [–ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Æ–Ω–≥–∞/–§—Ä–µ–π–¥–∞]
üìä –û—Å–Ω–æ–≤–Ω—ã–µ —á–µ—Ä—Ç—ã: [3-4 –∫–ª—é—á–µ–≤—ã–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏]
üíº –ü–æ–¥—Ö–æ–¥—è—â–∏–µ —Å—Ñ–µ—Ä—ã: [4-5 –æ–±–ª–∞—Å—Ç–µ–π —Å –æ–±–æ—Å–Ω–æ–≤–∞–Ω–∏–µ–º]
üéì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–±—É—á–µ–Ω–∏—é: [–∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ —Ñ–æ—Ä–º–∞—Ç—ã]
‚ö†Ô∏è –ó–æ–Ω—ã —Ä–∞–∑–≤–∏—Ç–∏—è: [—á—Ç–æ —Å—Ç–æ–∏—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∏ –∫–∞–∫]
üí° –ö–∞—Ä—å–µ—Ä–Ω—ã–µ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã: [–ø–æ—Ç–µ–Ω—Ü–∏–∞–ª —Ä–æ—Å—Ç–∞]

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, —ç–º–ø–∞—Ç–∏—á–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π. –î–æ 500 —Å–ª–æ–≤.""",
            description="–î–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø—Ä–µ—Å—Å-–∞–Ω–∞–ª–∏–∑",
            estimated_tokens=600
        )
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - –∫–æ—Ä–æ—Ç–∫–∞—è
        templates["psychology_consultation_short"] = PromptTemplate(
            id="psychology_consultation_short",
            type=PromptType.PSYCHOLOGY_CONSULTATION,
            length=PromptLength.SHORT,
            template="""–¢—ã ‚Äî –ø—Å–∏—Ö–æ–ª–æ–≥-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü–æ–¥–¥–µ—Ä–∂–∏ –∏ –ø–æ–π–º–∏ –∫–ª–∏–µ–Ω—Ç–∞.

–°–û–û–ë–©–ï–ù–ò–ï: {user_message}

–û–¢–í–ï–¢:
üíô –ü–æ–Ω–∏–º–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤
ü§ó –ü–æ–¥–¥–µ—Ä–∂–∫–∞
üí° –ú—è–≥–∫–∏–π —Å–æ–≤–µ—Ç

–°–¢–ò–õ–¨: –¢–µ–ø–ª—ã–π, –¥–æ 100 —Å–ª–æ–≤.""",
            description="–ö—Ä–∞—Ç–∫–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            estimated_tokens=150
        )
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - —Å—Ä–µ–¥–Ω—è—è
        templates["psychology_consultation_medium"] = PromptTemplate(
            id="psychology_consultation_medium",
            type=PromptType.PSYCHOLOGY_CONSULTATION,
            length=PromptLength.MEDIUM,
            template="""–¢—ã ‚Äî –æ–ø—ã—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥ —Å –±–æ–ª—å—à–∏–º —Å–µ—Ä–¥—Ü–µ–º.

–ò–°–¢–û–†–ò–Ø –†–ê–ó–ì–û–í–û–†–ê:
{conversation_context}

–¢–ï–ö–£–©–ï–ï –°–û–û–ë–©–ï–ù–ò–ï:
{user_message}

–¢–í–û–Ø –†–û–õ–¨: –î—Ä—É–≥-–ø—Å–∏—Ö–æ–ª–æ–≥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–Ω–∏—Ç –≤–µ—Å—å —Ä–∞–∑–≥–æ–≤–æ—Ä.

–ü–†–ò–ù–¶–ò–ü–´:
- –°–ù–ê–ß–ê–õ–ê –ø—Ä–æ—è–≤–∏ —ç–º–ø–∞—Ç–∏—é –∏ –ø–æ–Ω–∏–º–∞–Ω–∏–µ
- –£–ß–ò–¢–´–í–ê–ô –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –ù–ï –¥–∞–≤–∞–π —Å–æ–≤–µ—Ç—ã, –µ—Å–ª–∏ –Ω–µ –ø—Ä–æ—Å—è—Ç
- –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üíô –≠–º–ø–∞—Ç–∏—á–Ω—ã–π –æ—Ç–≤–µ—Ç (—Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞)
ü§ó –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∏ –ø—Ä–∏–Ω—è—Ç–∏–µ
üí° –ú—è–≥–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (–µ—Å–ª–∏ —É–º–µ—Å—Ç–Ω–æ)

–°–¢–ò–õ–¨: –¢–µ–ø–ª—ã–π, –ø–æ–Ω–∏–º–∞—é—â–∏–π. –î–æ 250 —Å–ª–æ–≤.""",
            description="–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
            estimated_tokens=300
        )
        
        # –ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è - —Å—Ä–µ–¥–Ω—è—è
        templates["career_consultation_medium"] = PromptTemplate(
            id="career_consultation_medium",
            type=PromptType.CAREER_CONSULTATION,
            length=PromptLength.MEDIUM,
            template="""–¢—ã ‚Äî HR-–∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç —Å 15-–ª–µ—Ç–Ω–∏–º –æ–ø—ã—Ç–æ–º.

–°–û–û–ë–©–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê:
{user_message}

–ö–û–ù–¢–ï–ö–°–¢: {conversation}

–¢–í–û–Ø –†–û–õ–¨: –≠–∫—Å–ø–µ—Ä—Ç –ø–æ –∫–∞—Ä—å–µ—Ä–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏—é.

–í–ê–ñ–ù–û: –û—Ç–≤–µ—á–∞–π –ü–û–õ–ù–û–°–¢–¨–Æ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ù–µ –æ–±—Ä—ã–≤–∞–π –æ—Ç–≤–µ—Ç.

–§–û–ö–£–°:
- –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏ –∏ –º–µ—Ç–æ–¥–∏–∫–∏
- –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã
- –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
- –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–§–û–†–ú–ê–¢ –û–¢–í–ï–¢–ê:
üíº –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
üéØ –ö–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–µ—Ö–Ω–∏–∫–∏
üìà –ö–∞—Ä—å–µ—Ä–Ω—ã–µ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏
üéì –û–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è

–°–¢–ò–õ–¨: –ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π, –ü–û–õ–ù–´–ô –æ—Ç–≤–µ—Ç. –î–æ 400 —Å–ª–æ–≤.""",
            description="–ö–∞—Ä—å–µ—Ä–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
            estimated_tokens=400
        )
        
        return templates
    
    def get_optimal_prompt(
        self, 
        prompt_type: PromptType, 
        available_tokens: int,
        user_id: Optional[int] = None,
        context: Optional[Dict] = None
    ) -> Tuple[str, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤"""
        
        # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_prefs = self.user_preferences.get(user_id, {})
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —à–∞–±–ª–æ–Ω—ã –ø–æ —Ç–∏–ø—É
        type_templates = {
            k: v for k, v in self.templates.items() 
            if v.type == prompt_type and v.active
        }
        
        if not type_templates:
            logger.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Ç–∏–ø–∞ {prompt_type}")
            return "", "default"
        
        # –í—ã–±–∏—Ä–∞–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—É—é –¥–ª–∏–Ω—É
        optimal_length = self._select_optimal_length(available_tokens, user_prefs)
        
        # –ò—â–µ–º —à–∞–±–ª–æ–Ω –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª–∏–Ω—ã
        suitable_templates = [
            t for t in type_templates.values() 
            if t.length == optimal_length and t.estimated_tokens <= available_tokens
        ]
        
        if not suitable_templates:
            # –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö, –±–µ—Ä–µ–º —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π
            suitable_templates = [
                t for t in type_templates.values() 
                if t.estimated_tokens <= available_tokens
            ]
            suitable_templates.sort(key=lambda x: x.estimated_tokens)
        
        if not suitable_templates:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –±–µ—Ä–µ–º —Å–∞–º—ã–π –∫–æ—Ä–æ—Ç–∫–∏–π
            suitable_templates = [min(type_templates.values(), key=lambda x: x.estimated_tokens)]
        
        selected_template = suitable_templates[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç
        formatted_prompt = self._format_prompt(selected_template, context or {})
        
        return formatted_prompt, selected_template.id
    
    def _select_optimal_length(self, available_tokens: int, user_prefs: Dict) -> PromptLength:
        """–í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–∞"""
        
        # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        preferred_length = user_prefs.get('preferred_length')
        if preferred_length:
            try:
                return PromptLength(preferred_length)
            except ValueError:
                pass
        
        # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤
        if available_tokens >= 600:
            return PromptLength.LONG
        elif available_tokens >= 400:
            return PromptLength.MEDIUM
        else:
            return PromptLength.SHORT
    
    def _format_prompt(self, template: PromptTemplate, context: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º"""
        try:
            return template.template.format(**context)
        except KeyError as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞ {template.id}: {e}")
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –±–∞–∑–æ–≤—ã–π —à–∞–±–ª–æ–Ω –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            return template.template
    
    def update_user_preferences(self, user_id: int, preferences: Dict):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.user_preferences:
            self.user_preferences[user_id] = {}
        
        self.user_preferences[user_id].update(preferences)
        logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω—ã –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {preferences}")
    
    def get_user_preferences(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        return self.user_preferences.get(user_id, {})
    
    def add_custom_template(self, template: PromptTemplate):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —à–∞–±–ª–æ–Ω–∞"""
        self.templates[template.id] = template
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π —à–∞–±–ª–æ–Ω: {template.id}")
    
    def deactivate_template(self, template_id: str):
        """–î–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —à–∞–±–ª–æ–Ω–∞"""
        if template_id in self.templates:
            self.templates[template_id].active = False
            logger.info(f"–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω —à–∞–±–ª–æ–Ω: {template_id}")
    
    def get_template_stats(self) -> Dict[str, Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ —à–∞–±–ª–æ–Ω–∞–º"""
        stats = {}
        
        for template_id, template in self.templates.items():
            stats[template_id] = {
                'type': template.type.value,
                'length': template.length.value,
                'estimated_tokens': template.estimated_tokens,
                'active': template.active,
                'description': template.description
            }
        
        return stats
    
    def optimize_for_user(self, user_id: int, usage_history: List[Dict]) -> Dict:
        """–û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏—Å—Ç–æ—Ä–∏–∏"""
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        patterns = self._analyze_usage_patterns(usage_history)
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        recommendations = {
            'preferred_length': self._recommend_length(patterns),
            'preferred_style': self._recommend_style(patterns),
            'optimization_suggestions': self._get_optimization_suggestions(patterns)
        }
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è
        self.update_user_preferences(user_id, recommendations)
        
        return recommendations
    
    def _analyze_usage_patterns(self, usage_history: List[Dict]) -> Dict:
        """–ê–Ω–∞–ª–∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è"""
        patterns = {
            'avg_response_length': 0,
            'preferred_prompt_types': [],
            'truncation_rate': 0,
            'user_satisfaction': 0
        }
        
        if not usage_history:
            return patterns
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–ª–∏–Ω—É –æ—Ç–≤–µ—Ç–æ–≤
        response_lengths = [h.get('response_length', 0) for h in usage_history]
        patterns['avg_response_length'] = sum(response_lengths) / len(response_lengths)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∏–ø—ã –ø—Ä–æ–º–ø—Ç–æ–≤
        prompt_types = [h.get('prompt_type') for h in usage_history if h.get('prompt_type')]
        patterns['preferred_prompt_types'] = list(set(prompt_types))
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–±—Ä–µ–∑–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
        truncated_count = sum(1 for h in usage_history if h.get('truncated', False))
        patterns['truncation_rate'] = truncated_count / len(usage_history)
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç—å
        satisfaction_scores = [h.get('satisfaction', 0) for h in usage_history if h.get('satisfaction')]
        if satisfaction_scores:
            patterns['user_satisfaction'] = sum(satisfaction_scores) / len(satisfaction_scores)
        
        return patterns
    
    def _recommend_length(self, patterns: Dict) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–ª–∏–Ω—ã –ø—Ä–æ–º–ø—Ç–∞"""
        avg_length = patterns.get('avg_response_length', 0)
        truncation_rate = patterns.get('truncation_rate', 0)
        
        if truncation_rate > 0.3:
            return PromptLength.SHORT.value
        elif avg_length > 400:
            return PromptLength.LONG.value
        else:
            return PromptLength.MEDIUM.value
    
    def _recommend_style(self, patterns: Dict) -> str:
        """–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è —Å—Ç–∏–ª—è –ø—Ä–æ–º–ø—Ç–∞"""
        satisfaction = patterns.get('user_satisfaction', 0)
        
        if satisfaction > 4.0:
            return "detailed"  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ª—é–±–∏—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã
        else:
            return "concise"   # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—Ç –∫—Ä–∞—Ç–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
    
    def _get_optimization_suggestions(self, patterns: Dict) -> List[str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏"""
        suggestions = []
        
        if patterns.get('truncation_rate', 0) > 0.2:
            suggestions.append("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ–ª–µ–µ –∫–æ—Ä–æ—Ç–∫–∏–µ –ø—Ä–æ–º–ø—Ç—ã")
        
        if patterns.get('avg_response_length', 0) < 200:
            suggestions.append("–ú–æ–∂–Ω–æ —É–≤–µ–ª–∏—á–∏—Ç—å –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—é –æ—Ç–≤–µ—Ç–æ–≤")
        
        if patterns.get('user_satisfaction', 0) < 3.0:
            suggestions.append("–°—Ç–æ–∏—Ç –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—Ç–∏–ª—å –ø–æ–¥ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        return suggestions